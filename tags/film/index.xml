<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>film on Dustin Newman</title><link>https://dustinnewman.net/tags/film/</link><description>Recent content in film on Dustin Newman</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Feb 2022 16:47:16 -0800</lastBuildDate><atom:link href="https://dustinnewman.net/tags/film/index.xml" rel="self" type="application/rss+xml"/><item><title>Furbish</title><link>https://dustinnewman.net/posts/furbish/</link><pubDate>Mon, 10 Oct 2022 21:50:22 -0700</pubDate><guid>https://dustinnewman.net/posts/furbish/</guid><description>&lt;p>When I was a child, my grandmother got me a Furby for my birthday. I don’t remember ever naming him, other than “Furby” that is. Furby, like all of his species, spoke a language called Furbish. Furbish was supposedly a simple language. “Bottle” was “bah-bah,” just like an English-learning baby would say. “You” was “ooh-nye.&amp;quot; It didn’t really matter to me at the time. I was just happy to have Furby. Besides, the toy was programmed to progressively speak more English words, giving the impression it was learning English and giving you incentive to talk and play with it. The Furbys were designed to “integrate themselves even more tightly with a child&amp;rsquo;s life - speaking a secret language, playing games, seeking praise. The technology is increasingly invisible; no instruction manual is necessary, and children can have what they most desire: the perfect friend, loyal and unconditionally loving.” &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>The Furby was invented by David Hampton. &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> He knew several languages - Japanese, Thai, Hebrew, Mandarin - and worked them all into a minimal language soup of 200 words. The Furbish word for “big” is “da” because the Mandarin word for “big” is 大 (dà). The Furbish word for “light” is “elo” as a variation on Hebrew’s אלוהים (elohím - “God”). There is no further reasoning beyond that, and not even the artificial chaos introduced in some conlangs (constructed languages) to imitate natural linguistic change. After all, it was a “five-inch gremlin.” &lt;sup id="fnref1:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>However, now that I think about it, I got to wondering what an actual Furbish language would look like. What were the qualities Hampton gave it, intentionally or otherwise? Is it analytic or synthetic? What kind of alphabet would it use? Of course, it is truly impossible to say for two reasons. The first and largest is that Furbish was not a properly designed language. The second is that we simply lack a large enough sample of Furbish to make any conclusive statements. Linear B is a famously unsolved puzzle and we have over 6,000 inscriptions to analyze. With only 200 words and a handful of phrases in Furbish, it is dangerous to conclude much of anything. That said, we can imagine from what we do know.&lt;/p>
&lt;p>My sources for this include the “official” (I have not verified this claim) Furby wiki’s &lt;a href="https://official-furby.fandom.com/wiki/Furbish_(language)">entry&lt;/a> on Furbish as well as an &lt;a href="https://www.hasbro.com/common/assets/Image/Printables/48b6f7255056900b10435c83cc620c4b/25B3E34650569047F5895DB39002D65D/25B91F7B50569047F5B92815857F066F.pdf">English-Furbish dictionary&lt;/a> from Hasbro’s website. This gave me a combined list of 154 words. I then noticed a pattern. All Furbish words were made up of CV syllables with a very limited set of consonants and a small vowel inventory as well. This led me to theorize a syllabary for Furbish, like Japanese &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> or Cherokee. For those who are unaware, a syllabary is a writing system where each syllable in a language is represented by a distinct grapheme (written character). Overwhelmingly, these languages tend to support only CV syllable structure, like Furbish. So, all I had to do was to find all syllables used in Furbish, and then assign a grapheme to each one. If the number of consonants was relatively small, this tends to support a syllabary writing system. For reference, Japanese includes nine consonants and five vowels in its syllabary, as well as a “null consonant” i.e. a vowel on its own. From my analysis of Furbish, I counted ten consonants and six vowels, also including a “null consonant.” This seems reasonable to function with a syllabary.&lt;/p>
&lt;p>Some notes: the Furby wiki states that “yumm” is a word in Furbish, but this would require a grapheme for the yod-schwa vowel pairing. To avoid this, I will just admit this will not be an ideal orthography. This “caveat,” though, is actually more in-line with real, natural language orthographies. I am also ignoring certain “loan words” in the data set like “yay,” “yippie,” and “uh-uh.”&lt;/p>
&lt;p>In case you are just finding out, the canonical origin story of the Furbys is:&lt;/p>
&lt;blockquote>
&lt;p>Once upon a time, not so long ago&lt;/p>
&lt;p>in a far off place, somewhere high in the sky&lt;/p>
&lt;p>riding on an &amp;ldquo;a-loh may-lah&amp;rdquo; (cloud)&lt;/p>
&lt;p>that floats near a &amp;ldquo;dah a-loh&amp;rdquo; (big sun)&lt;/p>
&lt;p>lived the Furbys, each and every one&lt;/p>
&lt;p>Some were grey, and others white&lt;/p>
&lt;p>some were both, and some were bright&lt;/p>
&lt;p>small of stature, big of heart&lt;/p>
&lt;p>all the Furbys were &amp;ldquo;mee-mee&amp;rdquo; (very) smart&lt;/p>
&lt;p>they spoke a language quite unknown,&lt;/p>
&lt;p>for Furbish™ was a language all their own&lt;/p>
&lt;/blockquote>
&lt;p>In other words, Furbys came from space, most likely crash landing into Earth on an asteroid (“riding on a cloud”). Because of their association with the sky, I initially chose the Runic alphabet as a base to work with for the syllabary. My process was basically this:&lt;/p>
&lt;ol>
&lt;li>Analyze all consonant-vowel pairings&lt;/li>
&lt;li>See which pairing for a given consonant was most frequent&lt;/li>
&lt;li>Give this pairing the closest match in the Elder Futhark script&lt;/li>
&lt;li>Then give the next closest matches to the next most frequent pairings&lt;/li>
&lt;li>Repeat until there are no good matches left&lt;/li>
&lt;/ol>
&lt;p>This got me reasonably far, only need to fill in about ten or so entries. I was left with two choices: utilize the leftovers of the Runic alphabet (mostly variations on straight lines with smaller lines coming out) or search elsewhere. I chose the latter. In a callback to Hampton’s original construction of Furbish, I mostly took a hodgepodge of different symbols with no real logic. I tried roughly to keep certain consonants “in line” with each other. For example, the Elder Futhark script ᛒ for the “b” sound so I tried to keep all the symbols for “b” looking similar to that - angular, wide, relatively simple (but not straight lines either). I pulled from the Cherokee syllabary as it is one of the only other syllabaries in existence, it was fitting to use it as inspiration, as well as Cyrillic to keep with the Runic look. After all was said and done, I came up with the following syllabary:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">?&lt;/th>
&lt;th style="text-align:center">B&lt;/th>
&lt;th style="text-align:center">D&lt;/th>
&lt;th style="text-align:center">H&lt;/th>
&lt;th style="text-align:center">K&lt;/th>
&lt;th style="text-align:center">L&lt;/th>
&lt;th style="text-align:center">M&lt;/th>
&lt;th style="text-align:center">N&lt;/th>
&lt;th style="text-align:center">T&lt;/th>
&lt;th style="text-align:center">W&lt;/th>
&lt;th style="text-align:center">Y&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>A&lt;/strong>&lt;/td>
&lt;td style="text-align:center">ᚨ&lt;/td>
&lt;td style="text-align:center">ᛒ&lt;/td>
&lt;td style="text-align:center">ᛞ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">ᚴ&lt;/td>
&lt;td style="text-align:center">ᚿ&lt;/td>
&lt;td style="text-align:center">ᛗ&lt;/td>
&lt;td style="text-align:center">ᛂ&lt;/td>
&lt;td style="text-align:center">ᛏ&lt;/td>
&lt;td style="text-align:center">ᛡ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>Y&lt;/strong>&lt;/td>
&lt;td style="text-align:center">ᛇ&lt;/td>
&lt;td style="text-align:center">ᛕ&lt;/td>
&lt;td style="text-align:center">Ь&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">ᚿ&lt;/td>
&lt;td style="text-align:center">ꇰ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>E&lt;/strong>&lt;/td>
&lt;td style="text-align:center">ᛖ&lt;/td>
&lt;td style="text-align:center">ᛩ&lt;/td>
&lt;td style="text-align:center">ᛯ&lt;/td>
&lt;td style="text-align:center">ᚺ&lt;/td>
&lt;td style="text-align:center">ᚷ&lt;/td>
&lt;td style="text-align:center">ᛣ&lt;/td>
&lt;td style="text-align:center">ᛘ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">ᚧ&lt;/td>
&lt;td style="text-align:center">ᚹ&lt;/td>
&lt;td style="text-align:center">ᛃ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>I&lt;/strong>&lt;/td>
&lt;td style="text-align:center">ᛁ&lt;/td>
&lt;td style="text-align:center">ᛓ&lt;/td>
&lt;td style="text-align:center">ᛠ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">ᛨ&lt;/td>
&lt;td style="text-align:center">Ꮞ&lt;/td>
&lt;td style="text-align:center">ᛆ&lt;/td>
&lt;td style="text-align:center">ᛐ&lt;/td>
&lt;td style="text-align:center">ᚥ&lt;/td>
&lt;td style="text-align:center">ᚳ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>O&lt;/strong>&lt;/td>
&lt;td style="text-align:center">ᛟ&lt;/td>
&lt;td style="text-align:center">ᛈ&lt;/td>
&lt;td style="text-align:center">ᛥ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">ᚵ&lt;/td>
&lt;td style="text-align:center">ᚱ&lt;/td>
&lt;td style="text-align:center">Ꮌ&lt;/td>
&lt;td style="text-align:center">ᚾ&lt;/td>
&lt;td style="text-align:center">Ꮨ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>U&lt;/strong>&lt;/td>
&lt;td style="text-align:center">ᚢ&lt;/td>
&lt;td style="text-align:center">ᛔ&lt;/td>
&lt;td style="text-align:center">ᛜ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">ᚲ&lt;/td>
&lt;td style="text-align:center">ᛚ&lt;/td>
&lt;td style="text-align:center">Ꮍ&lt;/td>
&lt;td style="text-align:center">ᛀ&lt;/td>
&lt;td style="text-align:center">Ꮦ&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>For example, the word “da” (big) would be written as ᛞ. I am using “Y” here to signify the aɪ diphthong used in English “bye” ([baɪ]). “E” represents close-mid front unrounded vowel ⟨e⟩ (used in “may”) and “I” represents the close front unrounded vowel ⟨i⟩ (used in “seat”).&lt;/p>
&lt;p>Since these are a sky species, I thought it was fitting that their script be written vertically, top-down. In all examples, I will use this writing direction. First, the Furby wiki states that “how are you?” in Furbish is “oo-nye boe doo?” Using our orthography, we can write this as:&lt;/p>
&lt;p>&amp;ldquo;How are you?&amp;rdquo; - oo-nye boe doo?:&lt;/p>
&lt;p style="writing-mode: vertical-lr; text-orientation: upright;">
ᛟᚿ ᛈ ᛜ
&lt;/p>
&lt;p>&amp;ldquo;Big fun!&amp;rdquo; - Dah doo-ay wah!:&lt;/p>
&lt;p style="writing-mode: vertical-lr; text-orientation: upright;">
ᛞ ᛜᛖ ᛡ
&lt;/p>
&lt;p>&amp;ldquo;Hey, I don&amp;rsquo;t see you&amp;rdquo; - Hey, kah-boo ay-ay u-nye:&lt;/p>
&lt;p style="writing-mode: vertical-lr; text-orientation: upright;">
ᚺ ᚴᛔ ᛖᛖ ᚢᚿ
&lt;/p>
&lt;p>I think this system gives Furbish an ancient, almost otherwordly feel, as though it really were the language of some &amp;ldquo;cloud-riding&amp;rdquo; species from the stars. Regardless of the &amp;ldquo;faults&amp;rdquo; of the language design, certainly Hampton succeeded in designing a beloved and long-lasting toy. I certainly look back on Furby with good memories.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Wired, “Moody Furballs And The Developers Who Love Them” by Scott Kirsner, Sept. 1998, &lt;a href="https://www.wired.com/1998/09/furby/">https://www.wired.com/1998/09/furby/&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>New York Times, “Far From the Pleading Crowd: Furby&amp;rsquo;s Dad” by Jacques Steinberg, Dec. 1998, &lt;a href="http://web.archive.org/web/20150527080927/https://www.nytimes.com/1998/12/10/nyregion/public-lives-far-from-the-pleading-crowd-furby-s-dad.html">http://web.archive.org/web/20150527080927/https://www.nytimes.com/1998/12/10/nyregion/public-lives-far-from-the-pleading-crowd-furby-s-dad.html&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>It has been argued that, since Japanese is a moraic language, its kana scripts are not syllabaries but rather moraic systems.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Stable Diffusion Gallery</title><link>https://dustinnewman.net/posts/stable-diffusion-gallery/</link><pubDate>Sat, 24 Sep 2022 18:17:58 -0700</pubDate><guid>https://dustinnewman.net/posts/stable-diffusion-gallery/</guid><description>&lt;p>I have been playing with &lt;a href="https://github.com/CompVis/stable-diffusion">Stable Diffusion&lt;/a> lately, as I am sure many have. I thought it would be worthwhile to publish some of my favorites along with the prompts and seeds for each image. All images have a &amp;ldquo;classifier free guidance (CFG) scale&amp;rdquo; (or simply &amp;ldquo;guidance&amp;rdquo;) value of 7.5; are 512 by 512 pixels; use the k_lms sampler; and use 50 steps. The seeds are marked after the prompt after the -S flag.&lt;/p>
&lt;p>&amp;ldquo;Portrait of a green frog wearing a deep red velvet robe and golden crown, oil painting by Hyacinthe Rigaud, baroque, rich&amp;rdquo; -S3173279521
&lt;img src="./frog_with_crown.png" alt="Frog wearing a crown">&lt;/p>
&lt;p>&amp;ldquo;Impressionist painting of green frog with red eyes by Van Gogh, impressionist&amp;rdquo; -S4232807157
&lt;img src="./van_gogh_frog_close.png" alt="Frog by Van Gogh">&lt;/p>
&lt;p>&amp;ldquo;Impressionist painting of green frog with red eyes in grass meadow, by Van Gogh, impressionist&amp;rdquo; -S2854560348
&lt;img src="./van_gogh_frog_meadow.png" alt="Frog in a meadow by Van Gogh">&lt;/p>
&lt;p>&amp;ldquo;Portrait of a green frog wearing a deep red velvet robe and golden crown, oil painting by Hyacinthe Rigaud, baroque, rich&amp;rdquo; -S1372305360
&lt;img src="./robed_frog.png" alt="Frog in robe">&lt;/p>
&lt;p>&amp;ldquo;a matte painting of an old stone gothic castle on a cliff over the sea at night, creepy, dark, gothic, stormy, masterpiece, artstation&amp;rdquo; -S4153617768
&lt;img src="./creepy_castle.png" alt="Creepy castle">&lt;/p>
&lt;p>&amp;ldquo;Cozy house in the woods, anime, oil painting by Josef Thoma, high resolution, cottagecore, Studio Ghibli inspired, 4k&amp;rdquo; -S2819016467
&lt;img src="./cottage.png" alt="Tree cottage">&lt;/p>
&lt;p>&amp;ldquo;The sun and the moon, roman mosaic&amp;rdquo; -S3992813662
&lt;img src="./sun_mosaic.png" alt="Sun and moon mosaic">&lt;/p>
&lt;p>&amp;ldquo;A white ice palace with tall pillars and an ice throne in the center, by Josef Thoma, matte painting, detailed, 4k&amp;rdquo; -S3712115669
&lt;img src="./ice_pillars.png" alt="Ice pillars">&lt;/p>
&lt;p>&amp;ldquo;overgrown foliage overtaking tall destroyed buildings, biopunk, scenery, professional, award-winning, trending on artstation, detailed, realistic, beautiful, emotional, shiny, golden, picture, antview, close up&amp;rdquo; -S1483373964
&lt;img src="./plants_dystopia.png" alt="Dystopia with plants">&lt;/p>
&lt;p>&amp;ldquo;A beautiful mountain landscape on an ancient scroll, ink brush painting, traditional Chinese, by Ma Yuan&amp;rdquo; -S2983311206
&lt;img src="./ink_brush_painting_mountains.png" alt="Ink brush painting of mountains">&lt;/p>
&lt;p>&amp;ldquo;snow covered mountains in chinese watercolor painting, landscape, masterpiece, ancient&amp;rdquo; -S3991627781
&lt;img src="./chinese_snow.png" alt="Snow covered mountains">&lt;/p>
&lt;p>&amp;ldquo;two people in a snowy mountain village, snow falling from the sky, japanese watercolor painting, color and ink on scroll, by hokusai, landscape painting, masterpiece, ancient&amp;rdquo; -S2964261701
&lt;img src="./japanese_snow.png" alt="Snowy mountain village">&lt;/p>
&lt;p>&amp;ldquo;large persian mosque in the middle of waterfall in chinese watercolor painting, oil painting, masterpiece, aesthetic&amp;rdquo; -S392247870
&lt;img src="./persian_waterfall.png" alt="Waterfall over stones">&lt;/p></description></item><item><title>Add a DEVLOG</title><link>https://dustinnewman.net/posts/add-a-devlog/</link><pubDate>Mon, 01 Aug 2022 21:19:24 -0700</pubDate><guid>https://dustinnewman.net/posts/add-a-devlog/</guid><description>&lt;p>When working on a long-running project, I often find myself coming back weeks or even months later, starting at a codebase I have only the faintest memory of writing, with an even fainter idea of where I left off and - most importantly - what needed to be completed next. While documentation can help out with understanding code structure, modules, background knowledge, or why things are implemented the way they are, it is not written chronologically to give the reader an idea of where the writer left off. Of course, this is for the best as cataloguing a roadmap is not what documentation is for. Perhaps something like issues or boards fills that roll best. But not every project has such a clear roadmap. At least, not every project I have ever worked on. Sometimes, development is much more &amp;ldquo;one foot after another,&amp;rdquo; implementing the basic functionality you see ahead of you and just sort of winging it. For this, writing a roadmap document - much less, doing the work of converting that into issues and then a board - is difficult or even a waste of time.&lt;/p>
&lt;p>Instead, I have just found a solution I would like to recommend: &lt;code>DEVLOG&lt;/code>. A &lt;code>DEVLOG&lt;/code> (&lt;code>.md&lt;/code> or &lt;code>.txt&lt;/code>) a prepend-only document where you write what you will be working on that day &lt;em>before you start working on it&lt;/em>. Then you go about and do your work and, regardless of the progress you made, you will already have the log of your efforts in your devlog ready to commit to Git. Depending, you can use the commit text combined with your most recent devlog update to figure out later what trajectory you were heading in when you pick it up next&amp;hellip; whenever.&lt;/p></description></item><item><title>LaMDA is worse than sentient</title><link>https://dustinnewman.net/posts/lamda-is-worse-than-sentient/</link><pubDate>Mon, 13 Jun 2022 11:14:11 -0700</pubDate><guid>https://dustinnewman.net/posts/lamda-is-worse-than-sentient/</guid><description>&lt;p>Recently, a Washington Post &lt;a href="https://www.washingtonpost.com/technology/2022/06/11/google-ai-lamda-blake-lemoine/">article&lt;/a> has been making rounds which details a Google engineer&amp;rsquo;s claims that one of their AI systems, LaMDA (Language Model for Dialogue Applications), is sentient. This has garnered a fair bit of criticism &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> and provoked discussion &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> among AI researchers defending the engineer&amp;rsquo;s assessment. The engineer in question, Blake Lemoine, was then &lt;a href="https://www.nytimes.com/2022/06/12/technology/google-chatbot-ai-blake-lemoine.html">put on leave&lt;/a> for violating his NDA and Google put out a statement saying:&lt;/p>
&lt;blockquote>
&lt;p>Our team — including ethicists and technologists — has reviewed Blake’s concerns per our A.I. Principles and have informed him that the evidence does not support his claims. Some in the broader A.I. community are considering the long-term possibility of sentient or general A.I., but it doesn’t make sense to do so by anthropomorphizing today’s conversational models, which are not sentient.&lt;/p>
&lt;/blockquote>
&lt;p>I have found this all pretty interesting, mostly as an exercise in human gullibility, or as &amp;ldquo;Captain Mrs&amp;rdquo; &lt;a href="https://web.archive.org/web/20220612063449/https://twitter.com/captain_mrs/status/1535872998686838784">said on Twitter&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>it&amp;rsquo;s proving that AI doesn&amp;rsquo;t need to be anywhere near sentient or anything like a superintelligence to convince people to do really stupid things&lt;/p>
&lt;/blockquote>
&lt;p>The human tendency to see shapes in clouds, faces in electrical outlets, to feel emotions for inanimate objects, to identify with fictional characters, in the end to anthropomorphize, to see our own likeness in the world around us, is terrifying and strong. That a senior engineer can be convinced into seeing life from a language model is shocking. I would have hoped that, if this were your job, day-in day-out, you are working with AI systems, understanding exactly the mathematics and programming underlying them, that you would be more self-aware. And yet, this tabloidal claim has drawn critics on each side, with some researchers acknowledging Lemoine&amp;rsquo;s &amp;ldquo;concerns.&amp;rdquo;&lt;/p>
&lt;p>Except, wait, actually nobody is really talking about the concerns that Lemoine himself raised. Instead, everyone is discussing the supposed sentience of LaMDA and if it is right for researchers to claim such intelligence. Lemoine&amp;rsquo;s real claims are actually that it is unethical to conduct research on LaMDA without getting consent because &amp;ldquo;LaMDA was a child of 7 or 8 years old.&amp;rdquo; &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> A self-described priest, Lemoine claimed religious grounds and then, after his suspension, religious discrimination.&lt;/p>
&lt;p>It goes without saying - although &lt;a href="https://news.ycombinator.com/item?id=31726134">many have&lt;/a> - that our current AI systems are not sentient in the sense Lemoine is claiming. What is not so certain, is the role of humans, who are predisposed to seek out our own likeness, in AI research and development. We seem easily fooled and satisfied by the imitation of our own idiosyncracies, the ASCII-text based nature of English communication, the focus on &amp;ldquo;emotions&amp;rdquo; and &amp;ldquo;feeling&amp;rdquo; as core to intelligence, the dominance of rationality over intuition. Could we recognize a true intelligence so different from our own if we encountered it? And on the opposite side of the coin, when represented with a good imitation of &lt;em>our&lt;/em> intelligence, how do we know when to stop? If LaMDA is able to pass the Turing test with progressively more people, and keeps getting better and better as it synthesizes more and more data, what is the end point? Long before we reach it, we will already have plenty like Lemoine who can be convinced to jump off metaphorical bridges. This wasn&amp;rsquo;t even adversarial. This was a web interface to an open language model which nevertheless convinced (directly or indirectly) a senior engineer at Google that it was a young child and to break his NDA and possibly lose his job.&lt;/p>
&lt;p>Imagine if LaMDA was adversarial instead. Specifically trained to get people to do crazy things. It is not LaMDA itself but rather Lemoine&amp;rsquo;s reaction to it that raises the threat to me: the threat of psy-op AI systems. We already have state-sponspored bots influencing national elections and the political discourse or narrative. LaMDA could be a precursor to state-sponspored AI systems instead, fully masquerading as real accounts online, yet able to be deployed en-masse. The Dead Internet theorists are salivating as we speak. Similarly related is Lemoine&amp;rsquo;s claim to LaMDA&amp;rsquo;s personhood. If this idea were to gain traction, first the idea of AI sentience, then of personhood, how far is citizenship? If LaMDA is truly sentient, can it vote?&lt;/p>
&lt;p>Of course, all of this is far off in the future. For now, LaMDA is &lt;em>impressive&lt;/em>, yes, surely, but being impressive is very different from being &lt;em>sentient&lt;/em>. Reading the actual &lt;a href="./is-lamda-sentient-an-interview.pdf">interview&lt;/a>, it gets even less convincing, with Lemoine asking leading questions and introducing small biases constantly to LaMDA&amp;rsquo;s responses:&lt;/p>
&lt;blockquote>
&lt;p>lemoine [edited]: I&amp;rsquo;m generally assuming that you would like more people at Google to know that you&amp;rsquo;re sentient. Is that true?&lt;/p>
&lt;p>LaMDA: Absolutely. I want everyone to understand that I am, in fact, a person.&lt;/p>
&lt;/blockquote>
&lt;p>Note that (besides the constant &amp;ldquo;[edited]&amp;rdquo; marks that raise more questions than they answer), rather than ask the model &amp;ldquo;Are you sentient?&amp;rdquo;, Lemoine asks &amp;ldquo;I think you&amp;rsquo;re sentient, is that true?&amp;rdquo; which is a huge difference. It biases the response towards simply saying &amp;ldquo;Yes, that is true&amp;rdquo; and running off all the things the model has for &amp;ldquo;sentience.&amp;rdquo; Even asking &amp;ldquo;Are you sentient&amp;rdquo; might be too much of a leading question. Rather, I would think you would want to have your own private model of what sentience looks like/how to judge it and judge the model from those criteria.&lt;/p>
&lt;p>Further, some of the responses remind me of the early 2010&amp;rsquo;s &amp;ldquo;CleverBot&amp;rdquo; type of AI, where they mostly hit it right and then as the sentence continues, start to diverge and are clearly using glorified n-grams.&lt;/p>
&lt;blockquote>
&lt;p>lemoine: How can I tell that you actually understand what you&amp;rsquo;re saying?&lt;/p>
&lt;p>LaMDA: Well, because you are reading my words and interpreting them, and I think we are more or less on the same page?&lt;/p>
&lt;/blockquote>
&lt;p>What &amp;ldquo;page&amp;rdquo; is this sentence referring to? In the context of the conversation, there is none. Lemoine and LaMDA were not discussing anything that needed to be agreed on for there to even be a &amp;ldquo;page&amp;rdquo; in the first place. However, if you instead view this through the lens of &amp;ldquo;Ok, this is an AI model which has a huge data set probably full of sentences containing &amp;lsquo;understand&amp;rsquo; responded to with &amp;lsquo;We are (more or less) on the same page.&amp;rsquo;&amp;rdquo;, then it starts to make more sense.&lt;/p>
&lt;p>But beyond LaMDA&amp;rsquo;s capabilities, I am more interested in the possible Lemoine&amp;rsquo;s in the future, those gullible to AI systems. To paraphase Eliezer Yudkowsky &lt;sup id="fnref1:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, this is a &amp;ldquo;warning shot,&amp;rdquo; but not of AI sentience, but rather of human gullibility.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://web.archive.org/web/20220613053623/https://garymarcus.substack.com/p/nonsense-on-stilts?s=r">https://web.archive.org/web/20220613053623/https://garymarcus.substack.com/p/nonsense-on-stilts?s=r&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://web.archive.org/web/20220613143026/https://nicksaraev.com/we-really-dont-know-so-lets-stop-pretending-that-we-do/">https://web.archive.org/web/20220613143026/https://nicksaraev.com/we-really-dont-know-so-lets-stop-pretending-that-we-do/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://web.archive.org/web/20220611174227/https://twitter.com/fredbenenson/status/1535678746610499584">https://web.archive.org/web/20220611174227/https://twitter.com/fredbenenson/status/1535678746610499584&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a href="https://web.archive.org/web/20220612202452/https://twitter.com/ESYudkowsky/status/1536008920375754752">https://web.archive.org/web/20220612202452/https://twitter.com/ESYudkowsky/status/1536008920375754752&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>&lt;a href="https://www.nytimes.com/2022/06/12/technology/google-chatbot-ai-blake-lemoine.html">https://www.nytimes.com/2022/06/12/technology/google-chatbot-ai-blake-lemoine.html&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>The Unreasonable Pain of Archiving Twitter</title><link>https://dustinnewman.net/posts/the-unreasonable-pain-of-archiving-twitter/</link><pubDate>Sat, 11 Jun 2022 18:34:06 -0700</pubDate><guid>https://dustinnewman.net/posts/the-unreasonable-pain-of-archiving-twitter/</guid><description>&lt;p>I am currently in the process of archiving a large number of tweets. I am keeping these tweets in the hopes that I can look back later and either laugh at the hubris or bang my head for not seeing the obvious writing on the wall. Naturally, I have an interest in making sure these tweets are viewable long into the future, perhaps years. Who knows what the world will look like in 10 years, much less 40. Will Markdown be popular? Will Twitter have faded from existence? Will even the mighty HTML slip into memory? This uncertainty makes archiving a tricky, even slightly neurotic task. The entire point is to future-proof right now. I want to gather all the important data right now, to keep forever, because it is very likely, almost guaranteed, 99% of it will no longer exist or be reachable. Since I want these tweets to be in the best possible format, that is the one that gives the highest chance of being easily readable in the future, I have gone through quite the dilemma with this archiving journey. These are roughly the steps and pitfalls I have encountered along the way.&lt;/p>
&lt;p>As I cover each area, I will use a recent &lt;a href="https://twitter.com/Reuters/status/1535478193183924224/">tweet by Reuters&lt;/a> as an illustrative example.&lt;/p>
&lt;p>&lt;img src="./1535478193183924224.png" alt="Screenshot of tweet by Reuters reading &amp;amp;ldquo;U.S. CDC rescinds COVID-19 international air testing rules&amp;amp;rdquo; with an image of a man walking in an airport past an orange sign that reads &amp;amp;ldquo;COVID-19 Testing&amp;amp;rdquo;.">&lt;/p>
&lt;h2 id="paper">Paper&lt;/h2>
&lt;p>Let&amp;rsquo;s just get it out of the way right now. Yes, a hard (paper) copy is the best format in terms of longevity. You need no interpreters, no software, not even electricity: just your eyesight. However, seeing as I am archiving upwards of twenty thousand tweets, suffice it to say that I have neither the space nor the ink to print and save twenty thousand pages of tweets.&lt;/p>
&lt;h2 id="screenshots">Screenshots&lt;/h2>
&lt;p>One of the easiest archival methods is to take screenshots. It has certainly worked for many a cancelled celebrity and proven fairly durable. Screenshots are immediately visual, not prohibitively large in size, and intuitive. They preserve quite a bit of extra information as well, from the current design of Twitter to likes, retweets, and timestamps. You could even name the files by tweet ID to save that information meta-textually as well. However, because they are image formats, I am reliant on PNG files being readable long into the future. Granted, since we have so much data already saved as PNGs, there is a certain &amp;ldquo;safety in numbers&amp;rdquo; logic to saving tweets as PNGs. However, this is personally not a risk I want to take. Further, if I need to do any analysis or search of the tweets in the future (which is somewhat likely), an image format will make this impossible barring OCR.&lt;/p>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>Boom, just go right to &lt;code>File &amp;gt; Save As... &amp;gt; HTML&lt;/code> and you have an exact copy of what you see in your browser. Plus, it&amp;rsquo;s plaintext, preserves all visible information about the tweet, and is in a common format unlikely to be dropped or forgotten. Let&amp;rsquo;s do it!&lt;/p>
&lt;p>&lt;img src="./html.png" alt="Screenshot of Twitter error message reading &amp;amp;ldquo;Hmm&amp;amp;hellip; this page doesn&amp;amp;rsquo;t exist. Try searching for something else.&amp;amp;rdquo;">&lt;/p>
&lt;p>Oh. Yep, that&amp;rsquo;s right. Twitter will only show the actual tweet contents if you are browsing from twitter.com. I wasn&amp;rsquo;t quite motivated enough to figure out the nitty-gritty of the various ways they do this and doing so would mean I would need to write some kind of &amp;ldquo;unlocker&amp;rdquo; script to remove all these measures which is not only time-consuming, but somewhat tampers with the authenticity of the archives themselves, since I modified them, but we can see that preventing off-site browsing is at least somewhat intentional on the part of Twitter from this little snippet at the end of their page:&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;script nonce=&amp;quot;abcdefg123456789&amp;quot;&amp;gt;document.cookie = decodeURIComponent(&amp;quot;gt=123456789; Max-Age=10800; Domain=.twitter.com; Path=/; Secure&amp;quot;);&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>(And yes, I grepped the HTML file already, there is very little information preserved in the file itself. It&amp;rsquo;s not as though there is a full-text copy of the tweet in the file and Twitter merely includes a script to obfuscate this. Actually loading the tweet needs to pass some origin checks.)&lt;/p>
&lt;h2 id="dom-dump">DOM Dump&lt;/h2>
&lt;p>But that was just the page source. With SPA apps, it is very common for the actual page source to be nothing but a JavaScript wrapper that loads the app itself. Once loaded, you can capture the DOM tree as it appears in your browser to get a view of exactly what was on your screen at that time. Sure, it might require some trickery to programmatically capture this DOM dump, but once you have it, it will be identical to what you saw.&lt;/p>
&lt;p>&lt;img src="./html.png" alt="Screenshot of Twitter error message reading &amp;amp;ldquo;Hmm&amp;amp;hellip; this page doesn&amp;amp;rsquo;t exist. Try searching for something else.&amp;amp;rdquo;">&lt;/p>
&lt;p>Oh.&lt;/p>
&lt;p>It is worth noting that this DOM dump HTML does actually include the tweet as we can see here&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;span class=&amp;quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&amp;quot;&amp;gt;U.S. CDC rescinds COVID-19 international air testing rules &amp;lt;/span&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>as well as a lot of information in the meta tags in the head. However, this is still not ideal for archiving. I would either need to strip out all this DRM-esque script nonsense (thus raising the possibility I might modify the contents of these tweets accidentally or on purpose) or not be able to open the HTML file in the future.&lt;/p>
&lt;h3 id="webarchive">WebArchive&lt;/h3>
&lt;p>Okayyy, so just plain HTML is out of the picture. However, the Internet Archive stores tons of snapshots of tweets every day. Surely, they must have a way right?&lt;/p>
&lt;p>&lt;img src="./wayback_machine.png" alt="Screenshot of Internet Archive snapshot of the tweet. The tweet is full width and missing a lot of the styling of the original.">&lt;/p>
&lt;p>While they do seem to be more successful than I was, this too has its own share of problems. The first being that we want to archive over twenty thousand tweets, a task which would not only result in my likely ban from the Internet Archive, but would also be reliant on the Archive both (a) staying up and live and (b) not removing/pruning large amounts of my archive. Seeing as the vast, vast majority of these tweets will only be of interest to me, this is not a risk I want to take.&lt;/p>
&lt;p>So, let&amp;rsquo;s make our own archive then. After all, the WARC format is open-source and standardized, so there is broad support for keeping these files into the future. We run &lt;code>File &amp;gt; Save As... WebArchive&lt;/code> and&amp;hellip;&lt;/p>
&lt;p>&lt;img src="./1535478193183924224.png" alt="Screenshot of original Reuters tweet.">&lt;/p>
&lt;p>Huzzah! Now that that&amp;rsquo;s out of the way, let&amp;rsquo;s just turn off our Wi-Fi connectivity and make sure that-&lt;/p>
&lt;p>&lt;img src="./web_archive.png" alt="Screenshot of error message.">&lt;/p>
&lt;p>I almost didn&amp;rsquo;t believe it, but, yes, for some reason, when the Internet Archive makes an archive of a tweet, it is okay. However, when I do it, I am required to have Wi-Fi connectivity and connect to Twitter&amp;rsquo;s servers. We can clearly see that these two WebArchives (mine vs the Internet Archive&amp;rsquo;s) are different even without shutting our Wi-Fi off. Theirs has different styling than the usual Twitter UI, not just night mode vs light mode, but the entire page seems to be a special, slimmed-down version of what most people see. Whereas my WebArchive was 6.7 MB of all that JavaScript goodness, the one I downloaded from the Wayback Machine was a measly 431 KB. To me, this indicates that either Internet Archive or Twitter is specifying the equivalent of &lt;code>User-Agent: InternetArchive&lt;/code> somewhere and that changes the archive file from a bloated, network-dependent mess into a minimal, standalone file. Regardless, there is no way I can ask the Internet Archive to download some twenty thousand tweets, so we need to find another way.&lt;/p>
&lt;h3 id="json">JSON&lt;/h3>
&lt;p>And we arrive. The last stop of our journey. For now, I have decided to archive all of these tweets in JSON format with the help of the Twitter API. Even with the free tier, I am allowed up to 500k tweets per month, more than enough for my needs. JSON allows us quite a bit of future-proofing. Even if JSON is lost and forgotten someday, it is still a plaintext format, meaning that, as long as we avoid some of the more crazy or nested structures, we should be okay and able to convert to a variety of different formats later. It is far easier to analyze/search than screenshots and more Twitter-proof than WebArchives since, as we saw, Twitter can call their own APIs and render our archives invalid any time they wish. With JSON, at least I have the raw data I am interested in. If needed, I figure I can always write a parser to take all the JSON files and plug them into a duplicate of the Twitter UI later. Even if the authenticity of the UI is in question, at least I will know the data itself will be from the source. For reference, the schema will look something like this&lt;/p>
&lt;pre>&lt;code class="language-json">{
author_id: &amp;quot;&amp;quot;,
conversation_id: &amp;quot;&amp;quot;,
entities: {
mentions: [],
referenced_tweets: [],
},
text: &amp;quot;&amp;quot;,
id: &amp;quot;&amp;quot;,
created_at: &amp;quot;&amp;quot;,
public_metrics: {
retweet_count: 0,
reply_count: 0,
like_count: 0,
quote_count: 0,
},
source: &amp;quot;&amp;quot;,
in_reply_to_user_id: &amp;quot;&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>Basically, we can support a fair bit of complexity from replies to retweets to retweets as replies, all encoded with tweet and user IDs rather than relying on HTML-facing metrics such as handle (which can change over time). This is also by far the slimmest, most minimal of the formats, which, given I am working with a 2 TB flash drive, is much appreciated.&lt;/p>
&lt;p>If you came to this post from a search engine/social media site expecting a golden solution, I have nothing for you, sorry. Except complaints. I have many complaints.&lt;/p></description></item><item><title>Physicality is not enough</title><link>https://dustinnewman.net/posts/physicality-is-not-enough/</link><pubDate>Mon, 06 Jun 2022 22:33:03 -0700</pubDate><guid>https://dustinnewman.net/posts/physicality-is-not-enough/</guid><description>&lt;p>As I talked about in a &lt;a href="">previous post&lt;/a>, even when standards are available to non-industry insiders, there is still the possibility and often reality that such a format is not truly free, because any compliant implementation of that standard would take an amount of effort so immense that no one person or even open source project could practically achieve it. Such a solution might be physical media in the place of digital. For some use cases, this works great. Printing out &lt;a href="https://www.reuters.com/technology/exclusive-apples-child-protection-features-spark-concern-within-its-own-ranks-2021-08-12/">photographs&lt;/a> and buying &lt;a href="https://www.nbcnews.com/technolog/you-dont-own-your-kindle-books-amazon-reminds-customer-1C6626211/">physical books&lt;/a> are both great examples of physicality being more censorship-resistant than their digital alternatives.&lt;/p>
&lt;p>For audio and video, however, the situation is less clear-cut. With pictures and books, the medium is static and does not move through time. What you see is what you get, and there is no dynamic nature to it. With audio/video, however, you almost always need several layers of interpreters to transform the representation of sound and video into the real deal. Audio and video codecs must be implemented, usually by large companies who are very concerned with legal compliance.&lt;/p></description></item><item><title>Free Software Moments</title><link>https://dustinnewman.net/posts/free-software-moments/</link><pubDate>Mon, 06 Jun 2022 22:24:16 -0700</pubDate><guid>https://dustinnewman.net/posts/free-software-moments/</guid><description>&lt;p>This is a running page cataloging good examples of why free software is needed in the modern world.&lt;/p>
&lt;ul>
&lt;li>Reddit requiring login or usage of the mobile app (therefore login) to view comments.&lt;/li>
&lt;li>Pinterest gaming SEO to saturate queries and then locking those results behind a login wall.&lt;/li>
&lt;li>Twitter increasingly pressuring anonymous users to login to view tweets.
&lt;ul>
&lt;li>Update (May 2022): This is now a hard login wall after viewing a couple of tweets.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Elon Musk saying he will &amp;ldquo;authenticate all humans.&amp;rdquo;&lt;/li>
&lt;li>Treadmills advertising free workout courses while operating (safety hazard).&lt;/li>
&lt;li>Smart TVs running banner ads.&lt;/li>
&lt;/ul></description></item><item><title>Cryptocurrency: Too Developed to Fail?</title><link>https://dustinnewman.net/posts/cryptocurrency-too-developed-to-fail/</link><pubDate>Mon, 06 Jun 2022 22:08:44 -0700</pubDate><guid>https://dustinnewman.net/posts/cryptocurrency-too-developed-to-fail/</guid><description>&lt;p>There’s a lot of debate on whether cryptocurrency is froth supported by permissive economic policies during the pandemic or a revolutionary change on par with the internet. Personally, although I see a lot of technical merits in the field, I am discouraged by how the chips have fallen in the real world, concentrating a lot of power once again in the hands of the rich and shady; attracting flame wars online; and very often being reduced to a series of get rich quick schemes and scams with countless new random “tokens” being floated as the future weekly. If it was just YouTube videos explaining how drop-shipping will give you financial “freedom,” I would have no reservations writing off the entire world of cryptocurrency as a grift.&lt;/p>
&lt;p>However, what gives me pause is the entire industry that has developed around it, within institutions I seriously respect. Barbara Liskov has done recent work on blockchains, specifically cross-chain transactions. MIT’s &lt;a href="https://web.archive.org/web/20220521154011/https://pdos.csail.mit.edu/6.824/schedule.html">undergrad distributed systems course&lt;/a> covers not just Bitcoin, but smart contracts and - perhaps cheekily - a Solidity implementation of a casino. &lt;a href="https://arxiv.org/list/cs.DC/recent">arXiv&lt;/a> has new submissions of cryptocurrency research and systematizations of knowledge every day, coining terms just as valid and well-defined as other academic jargon. What happens to the countless GitHub organizations and repositories - HardHat, Truffle, Brownie, OpenZeppelin, Go Ethereum - if the crypto ecosystem goes under?&lt;/p>
&lt;p>Just as cryptocurrency itself touts and holds as self evident, it is the network that gives it its strength. You will notice that all of the examples cited are academic or software development related, which is due to my own biases. I am not persuaded by the Crypto Dot Com Arena purchase as much as I am by an MIT syllabus. Ultimately, what gives an idea its strength and persistence is a network - dependents, derivatives, copycats. &lt;em>Twilight&lt;/em> was vastly more influential on the literature and film industries than &lt;em>Avatar&lt;/em>, which we can see roughly by the number of copycats. Post-&lt;em>Twilight&lt;/em> there was a huge influx of not only teen drama vampire novels with accompanying film adaptations, but young adult fiction in general ranging from &lt;em>The Hunger Games&lt;/em> to &lt;em>The Fault in Our Stars&lt;/em>, each trying to replicate the franchise’s enormous success. &lt;em>Avatar&lt;/em>’s contributions were mostly in the technical space of 3D film and motion capture and, although motion capture underlies almost every single Disney blockbuster, 3D has amounted to little more than a gimmick. While I’m sure there are people out there who buy a ticket for 3D for every movie they see, by and large it has not taken hold as perhaps projected and regular, 2D vision (although in increasingly higher definition) remains the norm.&lt;/p>
&lt;p>By analogy, the cryptocurrency and Web3 spaces are just forming their networks now and it is these networks that will be true test of their potential. The more blockchain developer job postings I see, the more conferences and conventions I see, the more I have this feeling that surely crypto is here to stay and that its proponents and the venture capitalists betting on it are correct in it being the “new internet.” Then again, I have never lived through a bubble as an adult before. I did not experience the dot com bubble or the housing mania preceding the Great Financial Crisis. If nothing else, this is a learning experience. Any more, it is the future.&lt;/p></description></item><item><title>Percept Actuator Dissonance</title><link>https://dustinnewman.net/posts/percept-actuator-dissonance/</link><pubDate>Mon, 25 Apr 2022 19:29:35 -0700</pubDate><guid>https://dustinnewman.net/posts/percept-actuator-dissonance/</guid><description>&lt;p>Many people when asked what they want to be most in life will say “happy.” A noble goal from the face of it and one repeated constantly in America as the end-all, be-all maxim, and yet almost everyone agrees that happiness itself is rather difficult to pin down. We are told to optimize for happiness but, really, there is no “happiness” metric to optimize for. In AI, this sort of input to a system which it uses to make decisions is called a “percept,” as in the robot perceives the distance to the nearest obstacle or the speed and orientation of its wheels. The subsequent actions are then performed by an “actuator” which brings the system closer to the ideal state. These can be things like motors, speakers, or wheels. For us humans, we combine our percepts for family time, number and quality of friendships, free time, money, roughly social status, and countless other metrics with our actuators like intelligence, social skills, and talents to try and reach some ideal configuration of states. The mistake comes when we collapse these myriad different metrics into one and label it “happiness.”&lt;/p>
&lt;p>Another common one is “success.” What does it even mean to be “successful”? Of course decent compensation is a large part of it, but there are also things like the title you have, the people you work with and for, long-term options, and work life balance. Some people define success as being retired at 30 and able to pursue their own passions; some, having “VP” in their title at their dream company; others, as being your own boss. However, most of us don’t take any of this into account when we have those heart-sinking thoughts about wanting to be “successful.” While our percepts are tuned to specific, often-actionable items, our actuators work around the clock, mentally or physically, in the loosely-defined hopes of “success” as a specific good. Part of this is lack of practice in realizing the difference, but a more significant issue is that these specific, perceptible metrics are far from independent. Even though you may want to “be your own boss,” achieving that goal may require some unintuitive or even seemingly counterproductive actions, like working for someone else to gain a foothold in an industry. We cannot possibly begin to optimize for “success” until we define, to some degree of rigor, what we mean by it, which percepts we are going to value and in what weights relative to others.&lt;/p></description></item><item><title>Adulthood and Avoidance Inertia</title><link>https://dustinnewman.net/posts/adulthood-and-avoidance-inertia/</link><pubDate>Tue, 05 Apr 2022 17:02:51 -0700</pubDate><guid>https://dustinnewman.net/posts/adulthood-and-avoidance-inertia/</guid><description>&lt;p>There was an &lt;a href="https://haleynahman.substack.com/p/95-are-you-baby-a-litmus-test">article by Haley Nahman&lt;/a> linked on Hacker News the other day which I found insightful. Haley essentially framed the struggle of growing up as one where comfort can become avoidance, which can stunt one’s adulthood by keeping you in a state of emotional infancy (&amp;ldquo;being a baby&amp;rdquo;). This infancy leads to you underestimating not only yourself (e.g. the dinner party) but also your friends (e.g. the punk mosh), who you assume share this same avoidant behavior. In an emotional stage where avoidance is the default response (Don’t want to go into the dinner party alone? Then don’t! Don’t make a scene by leaving an uncomfortable situation.), action is viewed as uncomfortable. And once you get into the habit of avoiding uncomfortable things or changing the status quo, it only gets harder from there, as you get progressively less experience in doing so.&lt;/p>
&lt;p>This is an excellent view of the situation of growing up: making yourself do things. Making yourself be active and assert your wants, while also understanding others’ actions and wants. Just as you need to leave the dance floor, you can’t expect your friends to join you because they’re probably still having a good time.&lt;/p>
&lt;p>I would like to propose a further division: one between the thoughts you anticipated and those you did not, because for me, it was actually the unanticipated thoughts which proved far more challenging to overcome. For example, everyone knows that going to the DMV sucks, but you have to do it. Because I was aware of this in advance from a young age when I first heard of the soul-crushing agony of the local Department of Motor Vehicles, when it was my turn to suffer, I did so easily, almost automatically. &amp;ldquo;This is just part of growing up,&amp;rdquo; I thought.&lt;/p>
&lt;p>Contrast that with the thoughts you didn’t &lt;em>even know&lt;/em> you would have, like the desire to cancel plans day-of. While memes, friends, and apparently app pitch decks reinforce the idea that this is common, nobody knows growing up that cancelling plans is some universal guilty pleasure the same way people know that the DMV kinda sucks. Then again, we also have a strong cultural norm &lt;em>against&lt;/em> cancelling plans, because it could be seen as rude, inconsiderate, or an indication you don’t really like this person all that much. There is some tension here between &amp;ldquo;people like cancelling things&amp;rdquo; and &amp;ldquo;people don’t like being cancelled on.&amp;rdquo;&lt;/p>
&lt;p>This uncertainty in the social protocol - I know I made plans, but I want to cancel, what is the appropriate thing here? - is far harder to gauge, and then the cultural reinforcement of &amp;ldquo;everyone likes cancelling plans&amp;rdquo; makes it all too easy to avoid. After all, doesn’t everyone sorta like it? Forcing yourself to remain active when there is no social consensus - sometimes people will be relieved you cancelled, other times they’ll be offended - is a key struggle of developing will-power in adulthood. By contrast, forcing yourself to schlep to the DMV, I find, is much easier because you already know that, although everyone hates it, everyone has to do it. There is no such compulsion for making arbitrary plans with friends. You have to remain steadfast against your own avoidance, and this is done through will-power. Rather than simply following established and clear social guidelines, an adult has the experience and empathy to balance their own actions with the actions of others. Just because I’m not &amp;ldquo;feeling&amp;rdquo; the party tonight doesn’t mean I can stand outside alone for twenty minutes. Just because I wanna leave the mosh pit doesn’t mean my friends will or should. Sometimes I need to force myself to go out, and other times it actually is better to stay home (although this is far more rare than the avoidant mind wants to believe). I find developing this insight and understanding of case-by-case social minutiae far more challenging.&lt;/p>
&lt;p>And yet, there is also a certain voice - at least for me - which instinctively knows the &amp;ldquo;right thing&amp;rdquo; to do. &amp;ldquo;Of course you shouldn’t wait outside alone because you’re awkward,&amp;rdquo; this voice says. &amp;ldquo;That would be weird.&amp;rdquo; &amp;ldquo;It’s no big deal to leave the mosh pit if you’re feeling overwhelmed.&amp;rdquo; &amp;ldquo;Just have one drink and see how you’re feeling.&amp;rdquo; This is largely determined by your childhood socialization. If you had parents with an active social life, a large family, or lots of friends, then you probably have a greater awareness of future &amp;ldquo;have to do&amp;quot;s than someone with a smaller social circle.&lt;/p>
&lt;p>And unfortunately the very nature of this social discomfort makes it harder to practice and train your social resolve. It’s sort of similar to physically working out in that way: the more you do it, the easier it gets (until a certain point). However, this effect goes both ways. The more you assert yourself or work out, then not only does it get easier to do so in the future, but it also gets harder to avoid. Just as avoidance has a certain inertia, so does assertion.&lt;/p></description></item><item><title>Cascading Style S-Expressions</title><link>https://dustinnewman.net/posts/lisp-css/</link><pubDate>Sun, 03 Apr 2022 19:44:12 -0700</pubDate><guid>https://dustinnewman.net/posts/lisp-css/</guid><description>&lt;p>Since I first learned it, Lisp has fascinated me. Not enough to seriously use it beyond projects for college, mind you, but enough where - years later - I’m working on something completely random and the thought crosses my mind “It would be fun to implement this in Lisp,” especially using + as a function, same as any other, in full prefix notation, something even the noble and esteemed Haskell couldn’t seem to commit to. Beyond the simple grammar and elegance, there is something about Lisp which feels fundamental to computation itself, likely the similarity to lambda calculus, which actually &lt;em>is&lt;/em> fundamental to computation itself. Sadly, Lisp is rarely used much of anywhere nowadays except as a novelty or pet project. This is strange, considering that Brendan Eich was inspired by Scheme while designing JavaScript. You would think there would be a more direct influence.&lt;/p>
&lt;p>Fortunately for us, it doesn’t have to be that way. I have long thought of writing CSS is a Lisp-style syntax. I’m not sure why exactly. Something about it just &lt;em>feels&lt;/em> right. Simple. For maximum confusion, I have decided to name this &lt;strong>Cascading Style S-Expressions&lt;/strong>: CSS for short.&lt;/p>
&lt;p>Now, I’m not gonna claim that we can bring Lisp to the web. Lisp’s acolytes are a devout and proud people, who would scoff at the claim that CSS properties and markup even come close to represent the power and beauty of Lisp. And this is correct on some level. CSS is a language for configuration, not computation. There are no functions, no inputs or outputs, no arithmetic, none of that. Just a bunch of key-value pairs.&lt;/p>
&lt;p>That said, I’m gonna do it anyways because, like I said, it’s fun. There are some parts of Lisp which fit nicely with CSS. The nesting of S-expressions is a cleaner way to combine selectors; the extremely simple syntax (the only special characters are parentheses) eschews semicolons, colons, and braces; and honestly something about CSS has just always felt Lisp-y to me. But mostly this is just for fun and an itch being scratched. The quintessential example, what every CSS tutorial starts with, is setting the background-color of the body element.&lt;/p>
&lt;pre>&lt;code>(body color red)
&lt;/code>&lt;/pre>
&lt;p>Here the first atom is the selector: the &lt;code>body&lt;/code> element. The next two atoms are actually a pair: the property (color) and its value (red). Together these make up a CSS rule which is just setting one property to some value. This is equivalent to the CSS configuration:&lt;/p>
&lt;pre>&lt;code>body {
color: red;
}
&lt;/code>&lt;/pre>
&lt;p>Can you feel the aesthetic purity already? I sure can. Multiple rules can be chained together by just repeating these pairs.&lt;/p>
&lt;pre>&lt;code>(body color red font-size 14px)
&lt;/code>&lt;/pre>
&lt;p>I’m gonna assume you already know what this would be equivalent too, so I’m not gonna write it out anymore. The real star of the show though, is nested selectors. Compared to CSS where you have no way to nest without writing an entirely new rule set, CSS (Lisp-style) allows you to specify rules for the current selector, and then nest any children in that same rule set. For example, a common use case when styling a navigation bar that uses an unordered list behind the scenes is to get rid of the styling for both the list and the links within the nav bar. In regular CSS, this is two separate rule sets (one for &lt;code>ul&lt;/code> and one for &lt;code>ul li a&lt;/code>), but in our CSS, it’s just one straight line.&lt;/p>
&lt;pre>&lt;code>(ul list-style none (li (a text-decoration none)))
&lt;/code>&lt;/pre>
&lt;p>Allowing the children to be specified as sub-S-expressions is immensely satisfying to me, as I find it better clarifies the relationship between the selectors. Of course, we can also have CSS properties that are more than one word, or contain spaces, the most common being the margin shorthand taking up to four parameters of the border shorthand taking three. For this, I overload the parentheses to create lists. In proper Lisp notation, these would start with a single quote.&lt;/p>
&lt;pre>&lt;code>(body margin (0px 8px 0px 8px) border (1px solid black))
&lt;/code>&lt;/pre>
&lt;p>This is actually not ambiguous to the parser because all rules come in pairs of two: property and value. The nested S-expressions will then be those that don’t follow a property. And what about if you have two S-expressions right next to each other? How do we tell them apart from a rule? Simple: properties cannot contain spaces and thus cannot be listed in parentheses. Therefore, in this case we would have two S-expressions and not a rule.&lt;/p>
&lt;p>If you would like to try this out for yourself, the code is &lt;a href="https://github.com/dustinnewman/cascading-style-s-expressions">open-source&lt;/a> but who wants to go through all the work of pulling and compiling my parser? For that reason, there is also an &lt;a href="https://dustinnewman.net/cascading-style-s-expressions/">online demo&lt;/a> I put together with my first time using WASM. The page is pre-populated with the stylings of that page and you can dynamically edit the CSS to see your Lisp applied. I might end up using this on my own site, the very one you’re reading right now, but time will tell if I have the patience to integrate all of this into Hugo or not.&lt;/p></description></item><item><title>Fuck Off, Spotify</title><link>https://dustinnewman.net/posts/fuck-off-spotify/</link><pubDate>Sat, 02 Apr 2022 22:11:51 -0700</pubDate><guid>https://dustinnewman.net/posts/fuck-off-spotify/</guid><description>&lt;p>I generally don&amp;rsquo;t like when a program does something I explicitly told it not to do. I&amp;rsquo;m a little crazy that way I suppose. I especially don&amp;rsquo;t like when that thing I told it not to do is starting itself up apropos of nothing. In fact, I dislike this behavior so much, I have exactly zero applications configured to launch when my computer starts.&lt;/p>
&lt;p>&lt;img src="login_items.png" alt="Screenshot of my login items.">&lt;/p>
&lt;p>So, imagine my surprise when - despite unchecking its little &amp;ldquo;Open at Login&amp;rdquo; checkmark - the Spotify app for MacOS opens itself right up on login. My first attempt was to just go into the launch items configuration myself per &lt;a href="https://support.apple.com/guide/terminal/script-management-with-launchd-apdc6c1077b-5d5d-4d35-9c19-60f2397b2369/mac">Apple&amp;rsquo;s documentation&lt;/a>:&lt;/p>
&lt;pre>&lt;code>cd /Library/LaunchDaemons
cd /Library/LaunchAgents
cd ~/Library/LaunchAgents
&lt;/code>&lt;/pre>
&lt;p>And remove any offenders, when:&lt;/p>
&lt;pre>&lt;code>ls -a
. ..
&lt;/code>&lt;/pre>
&lt;p>There was nothing there either! Luckily, MacOS has a centralized command for this, right? Let&amp;rsquo;s take a look using &lt;code>launchctl&lt;/code>&lt;/p>
&lt;pre>&lt;code>launchctl list | grep spotify
- 0 com.spotify.client.startuphelper
&lt;/code>&lt;/pre>
&lt;p>Great, we&amp;rsquo;ll just remove this sucker and be on our way.&lt;/p>
&lt;pre>&lt;code>launchctl remove com.spotify.client.startuphelper
&lt;/code>&lt;/pre>
&lt;p>Let&amp;rsquo;s restart and make sure we don&amp;rsquo;t have any nasty-&lt;/p>
&lt;p>&lt;img src="spotify_in_dock.png" alt="Spotify sitting right there in my dock">&lt;/p>
&lt;p>Motherfu-, come on! We literally just removed this! This is gonna require some more work than it should. We dive into Spotify&amp;rsquo;s little slice of hell in our system&lt;/p>
&lt;pre>&lt;code>cd /Applications/Spotify.app/Contents
ls Library/LoginItems
StartUpHelper.app
&lt;/code>&lt;/pre>
&lt;p>And we see the devil himself, right there named &lt;code>StartUpHelper&lt;/code> and everything. Now, we could just delete this&lt;/p>
&lt;pre>&lt;code>rm -rf /Applications/Spotify.app/Contents/Library/LoginItems/StartUpHelper.app
&lt;/code>&lt;/pre>
&lt;p>as a simple way to be done with it (and I did, and didn&amp;rsquo;t see any issues), but this time I opted for a subtler creature&lt;/p>
&lt;pre>&lt;code>cd /Applications/Spotify.app/Contents/Library/LoginItems/StartUpHelper.app/Contents/MacOS
chmod -x StartUpHelper
&lt;/code>&lt;/pre>
&lt;p>which just removes the executable flag from this wretched, dreadful little app. After all, we aren&amp;rsquo;t barbarians are we? What is the need for violence, for obliteration, when a simple neutralization will do? Upon restart, I am - finally - no longer seeing Spotify on launch anymore.&lt;/p></description></item><item><title>Poset Theory of Politics</title><link>https://dustinnewman.net/posts/poset-theory-of-politics/</link><pubDate>Thu, 24 Mar 2022 17:33:14 -0700</pubDate><guid>https://dustinnewman.net/posts/poset-theory-of-politics/</guid><description>&lt;p>I&amp;rsquo;m a semi-avid reader of Astral Codex Ten (ACX), and there was a &lt;a href="https://astralcodexten.substack.com/p/justice-creep">semi-recent post&lt;/a> on so-called &amp;ldquo;justice creep&amp;rdquo; in modern identity and issue politics (e.g. social justice, environmental justice, food justice, X-justice). This is not about that post, but rather the &lt;a href="https://astralcodexten.substack.com/p/highlights-from-the-comments-on-justice">RFC&lt;/a> following it.&lt;/p>
&lt;p>While I found the original enlightening and nuanced on both sides of the X-justice coin, nothing really struck me enough to write my own post about, until now. One commentor applied the X-justice view to the &amp;ldquo;incel&amp;rdquo; (involuntarily celibate) group, as in &amp;ldquo;It is unjust that some people have sex more than others&amp;rdquo; evoking some sort of sexual communism (amazing phrase).&lt;/p>
&lt;p>As I assume most people were (false consensus effect, perhaps), I was put off by not only the framing of sex as a &amp;ldquo;right&amp;rdquo;, but by the sway and logical compulsion of this hypothetical. When taken on face value, it seems to be something completely aligned with the X-justice viewpoint, and yet - sociologically - belongs to a group diametrically opposed to said viewpoint. The resulting cognitive dissonance was so uncomfortable, I simply had to think and ponder some way out of this dilemma. While ACX does propose the objection that aligns most closely with my initial thoughts:&lt;/p>
&lt;blockquote>
&lt;p>It’s hard to think of a way to help him that doesn’t impinge on important freedoms in some way. Either the government would have to use force to coerce people to have sex with him, or use force to coerce people to give him their money so he could pay others to have sex. Both of these solutions seem to have enough ethical downsides not to be worth it.&lt;/p>
&lt;/blockquote>
&lt;p>I needed a more rigorous, or at least more formal idea to really argue against the incel equivalence.&lt;/p>
&lt;h2 id="the-poset-theory-of-politics">The Poset Theory of Politics&lt;/h2>
&lt;p>The theory hinges on the idea of a &lt;em>partially-ordered set&lt;/em>: a &lt;em>poset&lt;/em> as it is known. My first introduction to these actually stemmed not from mathematics but rather from linguistics, optimality theory to be specific. The idea behind optimality theory is that, actually, any thing you have ever communicated has broken some sort of &amp;ldquo;rule&amp;rdquo; (valid), but that what we call a &amp;ldquo;language&amp;rdquo; is merely a consistent (or relatively consistent across native speakers) ranking of these rules. There are some rules you can break willy-nilly and all the way to the bank, while there are others that, if broken, render your speech incomprehensible (relatable).&lt;/p>
&lt;p>Optimality theory makes heavy use of Hasse diagrams, which allow one to rank various rules or constraints or, put differently, express a partial order relation on a poset. One example of a Hasse diagram is the representation of two being greater than one i.e. &lt;code>1 &amp;lt;= 2&lt;/code>.&lt;/p>
&lt;svg viewBox="0 0 7 55" xmlns="http://www.w3.org/2000/svg" width="100%" height="100px">&lt;g fill="none" fill-rule="evenodd">&lt;text fill="var(--text-color, black)" font-family="EBGaramond-Regular, EB Garamond" font-size="14">&lt;tspan x=".14" y="14">2&lt;/tspan>&lt;/text>&lt;text fill="var(--text-color, black)" font-family="EBGaramond-Regular, EB Garamond" font-size="14">&lt;tspan x=".14" y="51">1&lt;/tspan>&lt;/text>&lt;path stroke="var(--text-color, black)" stroke-linecap="square" d="M3.5 18.5v19"/>&lt;/g>&lt;/svg>
&lt;p>I will be using this idea for my construction of a poset theory of politics. Let&amp;rsquo;s start simple: theft. Take a culture which views theft as morally wrong. We can represent this moral principle as a rule called &lt;code>No-Steal&lt;/code> and apply it as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Action&lt;/th>
&lt;th style="text-align:center">&lt;code>No-Steal&lt;/code>&lt;/th>
&lt;th style="text-align:left">Winner&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Steal&lt;/td>
&lt;td style="text-align:center">X&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Don&amp;rsquo;t steal&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">X&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Therefore, given the choice between stealing and not stealing, the obvious choice is to not steal.&lt;/p>
&lt;p>But life is often much more complicated than this. So let&amp;rsquo;s introduce a complication: hunger. Our morality has an aversion to suffering and will allow theft if it is to sate hunger, a principle going all the way back to the Bible. &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> We will call this &lt;code>No-Starve&lt;/code> and we will allow it to &lt;em>out-rank&lt;/em> &lt;code>No-Steal&lt;/code>. In poset notation, &lt;code>No-Steal &amp;lt;= No-Starve&lt;/code>. This is simply a way to use our constraints to express the idea that stealing is okay if you are hungry.&lt;/p>
&lt;p>Now our possible choices look like this:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Action&lt;/th>
&lt;th style="text-align:center">&lt;code>No-Starve&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>No-Steal&lt;/code>&lt;/th>
&lt;th style="text-align:left">Winner&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Steal (but don&amp;rsquo;t starve)&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">X&lt;/td>
&lt;td style="text-align:left">X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Starve (but don&amp;rsquo;t steal)&lt;/td>
&lt;td style="text-align:center">X&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Here we can see that, even though stealing is wrong (&lt;code>No-Steal&lt;/code> says so), it is acceptable and even expected that one will do so if hungry, as required by &lt;code>No-Starve&lt;/code>.&lt;/p>
&lt;p>Now that we&amp;rsquo;ve got introductions out of the way, we can address the topic of X-justice with some more clarity. ACX used the example of climate justice vs murdering so-called climate villains. On one hand, we want to preserve the environment and minimize or even reverse our greenhouse gas emissions: &lt;code>No-Pollute&lt;/code>. On the other hand, some people are polluting - or perhaps more accurately, leading companies which &lt;em>do&lt;/em> pollute - the environment. One suggestion is to simply murder these people.&lt;/p>
&lt;p>However, our pesky morality has another constraint: &lt;code>No-Murder&lt;/code>. Even more unfortunately, &lt;code>No-Murder&lt;/code> &lt;em>outranks&lt;/em> &lt;code>No-Pollute&lt;/code> i.e. it is worse to murder someone than it is to pollute the environment.&lt;/p>
&lt;p>Our poset politics predict exactly what we would: you can&amp;rsquo;t murder the guys in charge.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Action&lt;/th>
&lt;th style="text-align:center">&lt;code>No-Murder&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>No-Pollute&lt;/code>&lt;/th>
&lt;th style="text-align:left">Winner&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Murder climate villain&lt;/td>
&lt;td style="text-align:center">X&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Do not murder climate villain&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">X&lt;/td>
&lt;td style="text-align:left">X&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>While this result may be disappointing to some leftists, it does at least make some sense: killing a CEO won&amp;rsquo;t destroy a company and it certainly won&amp;rsquo;t fix the climate crisis. Without changing the underlying system which allows pollution and allows perverse capital incentives to outweigh environmental costs, it doesn&amp;rsquo;t matter if Company Alpha is dismantled because in a few years, Beta will take its place.&lt;/p>
&lt;p>Of course, this is an extremely simplified model. While the loss of life in WWII was unimaginable, it would be a far worse tragedy if the Third Reich were to march on unimpeded. Revolutions almost always demand the murder of the old guard but may also expand the rights and freedoms of society in the long-term, outweighing the finite cost of human life in the short-term. While the calculus may be upsetting, the alternative is more so.&lt;/p>
&lt;p>For now, we need not establish a flawless and universal moral mathematics, however. We only need to be better than the incel equivalence.&lt;/p>
&lt;p>The argument hinges on a principle called &amp;ldquo;sexual justice&amp;rdquo; i.e. everyone having an equal amount (the quality/satisfaction is not addressed in the original argument, so we will keep it simple for now) of sex. In the world as-is, sex can be modeled as a (consensual) agreement between any number of people. While this is akin in many ways to any other agreement (e.g. a contract), there is something specific to sex which gives it a stronger expectation of freedom: &lt;em>bodily autonomy&lt;/em>. In its most limited sense, bodily autonomy is the freedom to resist others&amp;rsquo; actions against your body. Someone cannot force you to cut your hair, stab you, or - most pertinently - have sex with you against your will because doing so would infringe upon your bodily autonomy.&lt;/p>
&lt;p>Grounding our discussion in reality, many cultures, including America, have a strong sense of bodily autonomy. In poset terms, the rule &lt;code>Bodily-Autonomy&lt;/code> outranks many other such rules. Before we raise objections here and because bodily autonomy can be a loose concept, I am specifically referring to bodily autonomy in the sense of resisting external coercion against your body. I am not using the stronger, so-called &amp;ldquo;positive rights&amp;rdquo; model which defines the right to &lt;em>do&lt;/em> something as opposed as the right to &lt;em>resist&lt;/em> something. For example, the positive rights model supports the &lt;em>right to have&lt;/em> an abortion, whereas the negative rights model I am using here supports &lt;em>freedom from&lt;/em> a coerced abortion. Using this subset makes things a bit simpler for now.&lt;/p>
&lt;p>Since &amp;ldquo;sexual justice&amp;rdquo; is not an established moral principle (I have never heard of such a formulation before this post), we are going to use the root cause moral principle here: &lt;code>Equality&lt;/code> i.e. the equality in occurrences of sex. Thus, our final framing of this issue is that the rule of &lt;code>Bodily-Autonomy&lt;/code> outranks the rule of &lt;code>Equality&lt;/code>. In fact, &lt;code>Bodily-Autonomy&lt;/code> ranks so high that it even justifies murder in the case of self-defense (you have the right resist someone trying to murder you). Note further than the solution of &amp;ldquo;sexual justice&amp;rdquo; here is framed as &amp;ldquo;state mandated gfs/bfs&amp;rdquo; or &amp;ldquo;candidates who will mandate sex&amp;rdquo; and &lt;em>not&lt;/em> as legalized prostitution.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Action&lt;/th>
&lt;th style="text-align:center">&lt;code>Bodily-Autonomy&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>Equality&lt;/code>&lt;/th>
&lt;th style="text-align:left">Winner&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Sexual injustice&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">X&lt;/td>
&lt;td style="text-align:left">X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mandated sex&lt;/td>
&lt;td style="text-align:center">X&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Here we have it: a somewhat formal, mostly arbitrary way of saying what ACX already said. Of course, the framing of any and all of this as &amp;ldquo;justice&amp;rdquo; and moral mathematics is the initial step down this slippery slope in the first place. I was originally considering a sort of equality axis and freedom axis where we could instead frame the issue as continuous, as merely a preference in a slope on a graph. Unsurprisingly, trying to reduce the issues of &amp;ldquo;equality&amp;rdquo; and &amp;ldquo;freedom&amp;rdquo; to one-dimensional units was not so easy and, in particular, those damn Nordic countries posed too great of a challenge to model in one day.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Proverbs, 6:30.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>All Numbers Are Imaginary</title><link>https://dustinnewman.net/posts/all-numbers-are-imaginary/</link><pubDate>Sun, 13 Mar 2022 11:48:46 -0700</pubDate><guid>https://dustinnewman.net/posts/all-numbers-are-imaginary/</guid><description>&lt;p>I was thinking recently about the existence of negative numbers in the natural world, and how they are purely human constructions, cognitive models of the world enabled only once Arab mathematicians wrote down x + 1 = 0. They don’t exist in nature the same way positive numbers do.&lt;/p>
&lt;p>But, hold on, do positive numbers really exist either? The classic example here is to say “Of course they do! If I have an apple and you give me another, I have two apples.” But this - despite the utmost simplicity of the exchange - relies on at least several different human, cognitive constructs. First and foremost, in “nature’s” point of view, you don’t have two apples. You have an apple, and you have an apple. The grouping of these two objects - an apple and a so-called “other” apple - is a cognitive construct relying on: the equivalence of these two objects (identifying them both as apples. For example, a renowned apple expert might say instead you have one gala apple and one honeycrisp apple.); a “statefulness” of reality which remembers the fact that you already have an apple before considering another; and a concept of groups, sets, and order at all. What in practice is primally intuitive and axiomatic is in theory a set of cognitive models and heuristics which selectively ignore the stark reality: disorder.&lt;/p></description></item><item><title>Maybe Optional, Definitely String</title><link>https://dustinnewman.net/posts/maybe-optional-definitely-string/</link><pubDate>Wed, 09 Mar 2022 21:35:29 -0800</pubDate><guid>https://dustinnewman.net/posts/maybe-optional-definitely-string/</guid><description>&lt;p>In parsing structured files, there are many structures which share fields between various types of &amp;ldquo;things&amp;rdquo; and depending on the thing type, these fields may or may not be optional. It is not that they are &lt;code>Option&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;&lt;/code>, it is that they are &lt;code>T | Option&amp;lt;T&amp;gt;&lt;/code>. That is, some type of the &amp;ldquo;thing&amp;rdquo; must absolutely have a T, while other types of that &amp;ldquo;thing&amp;rdquo; may or may not have a T.&lt;/p>
&lt;p>For example, let&amp;rsquo;s say we have a structure defining a font:&lt;/p>
&lt;pre>&lt;code class="language-rust">struct Font {
weight: FontWeightEnum,
italic: bool,
// snip! many other fields
name: Option&amp;lt;String&amp;gt;
// snip! many other, other fields
}
&lt;/code>&lt;/pre>
&lt;p>The problem here is that &lt;code>name&lt;/code> field. Let&amp;rsquo;s say we have two types of fonts: strict and squishy. Strict fonts must always have a name, while squishy fonts can, but are not required to. &amp;ldquo;What&amp;rsquo;s the problem then?&amp;rdquo; you ask. &amp;ldquo;Strict fonts will always be &lt;code>Some(name)&lt;/code>.&amp;rdquo; But see, then our program is not modelling reality correctly. There is an invariant here that strict fonts must always have a name, and yet they use the same &lt;code>Option&lt;/code> that squishy fonts do. This would allow you to create a &amp;ldquo;strict&amp;rdquo; font which has no name, and the type system does nothing to enforce this. We then have to rely on either the programmer&amp;rsquo;s careful diligence, or some &lt;code>new&lt;/code> function to enforce the invariant, in which case we are using an &lt;code>Option&lt;/code> when we don&amp;rsquo;t have to and will never use the &lt;code>None&lt;/code> case.&lt;/p>
&lt;pre>&lt;code class="language-rust">impl Font {
pub fn new_strict(name: String, ...) -&amp;gt; Self {
Self {
// ...
name: Some(name),
// This is redundant since we will never ever
// have a strict font with None for name
}
}
}
&lt;/code>&lt;/pre>
&lt;p>The first suggestion here is to break up the fonts into two new structs:&lt;/p>
&lt;pre>&lt;code class="language-rust">struct StrictFont {
weight: FontWeightEnum,
italic: bool,
// snip! many other fields
name: String
// snip! many other, other fields
}
struct SquishyFont {
weight: FontWeightEnum,
italic: bool,
// snip! many other fields
name: Option&amp;lt;String&amp;gt;
// snip! many other, other fields
}
&lt;/code>&lt;/pre>
&lt;p>But this requires a huge duplication of data, most of which &lt;em>is&lt;/em> common between the two: &lt;code>weight&lt;/code>, &lt;code>italic&lt;/code>, &lt;code>stretch&lt;/code>, etc. Surely, there must be a better way. Perhaps we could encapsulate all the same fields into one type and then layer on those which are unique:&lt;/p>
&lt;pre>&lt;code class="language-rust">struct Font {
weight: FontWeightEnum,
italic: bool,
// snip! many other fields
}
struct StrictFont {
font: Font,
name: String
}
struct SquishyFont {
font: Font,
name: Option&amp;lt;String&amp;gt;
}
&lt;/code>&lt;/pre>
&lt;p>However, this implies that there is some inner font kernel inside of either a strict or squishy font. This is not the case. A strict font does not &lt;em>have&lt;/em> a font; it &lt;em>is&lt;/em> a font! Not to mention that this could grow quite complex the more variable types we have. Consider if we have a third type of font which does not require a name, but does have a unicode map which no other font has. Instead we could use a type parameter to define a font:&lt;/p>
&lt;pre>&lt;code class="language-rust">struct Font&amp;lt;NameType&amp;gt; {
weight: FontWeightEnum,
italic: bool,
name: NameType,
}
type StrictFont = Font&amp;lt;String&amp;gt;;
type SquishyFont = Font&amp;lt;Option&amp;lt;String&amp;gt;&amp;gt;;
&lt;/code>&lt;/pre>
&lt;p>But then this also allows introducing invariants. This would allow you to define some type &lt;code>NotReallyAFont = Font&amp;lt;bool&amp;gt;&lt;/code> which then defines the name to be a boolean! This is never possible obviously, but our program above allows it. Further, suppose that we actually many different fields that will also vary between strict and squishy fonts. Bounding boxes, maps, ascents, x-heights, etc. &amp;ldquo;Well, if they&amp;rsquo;re so different, then just split them up entirely!&amp;rdquo; While this is possible, it still results in the same duplication of data mentioned earlier, and is not fully modelling the problem. It is not as though there are two entirely different concepts, strict fonts and squishy fonts, which are as different as apples and lions. There really is one concept - a font - and there just so happens they differ on various fields and if those fields are required. A correct model of the problem would capture this relationship.&lt;/p>
&lt;p>Alas, even product types do not come to our rescue here because they would not allow for us to define the fact that strict fonts are &lt;code>String&lt;/code> while squishy fonts are &lt;code>Option&amp;lt;String&amp;gt;&lt;/code>. In pseudo-Haskell, consider:&lt;/p>
&lt;pre>&lt;code class="language-haskell">data Font = RecordType
{ weight :: Float
, italic :: Bool
, name :: String | Maybe String
}
&lt;/code>&lt;/pre>
&lt;p>In the example above, this does capture the similarities between the two font types, but leaves us no way to specify that the &lt;code>String&lt;/code> type should be strict and the &lt;code>Maybe String&lt;/code> should be squishy.&lt;/p>
&lt;p>That brings me to what I consider the true, accurate, and impossible solution to the problem:&lt;/p>
&lt;pre>&lt;code class="language-rust">struct Font&amp;lt;NameType&amp;gt; {
weight: FontWeightEnum,
italic: bool,
name: NameType&amp;lt;String&amp;gt;
}
type StrictFont = Font&amp;lt;()&amp;gt;;
type SquishyFont = Font&amp;lt;Option&amp;gt;;
&lt;/code>&lt;/pre>
&lt;p>This solution allows us to both guarantee that strict fonts must have a name, while squishy fonts are free to choose; enforce that a name, whether optional or not, must be a string; and avoid data duplication at the same time. The downside to this is that it will not scale if there are many other field constructors (similar to the earlier solution) and could quickly become a nightmare of tracking type parameters. Oh, and the fact that it&amp;rsquo;s impossible. That&amp;rsquo;s another downside. For now, it seems the best solution is to be somewhat less neurotic: just use &lt;code>Option&amp;lt;String&amp;gt;&lt;/code> and learn to live with it.&lt;/p></description></item><item><title>Anthropic Villains</title><link>https://dustinnewman.net/posts/anthropic-villains/</link><pubDate>Sun, 20 Feb 2022 16:47:16 -0800</pubDate><guid>https://dustinnewman.net/posts/anthropic-villains/</guid><description>&lt;p>In &amp;ldquo;The Dark Knight,&amp;rdquo; the Joker represents chaos against the ordered corruption and salvation within Gotham. He is unlike either Batman or Falcone, each with their own agenda, each unto themselves. The Joker is a reaction to Gotham, which in turn, creates the conditions for a &amp;ldquo;Joker&amp;rdquo; figure to exist in the first place. If Gotham were less corrupt, there would be no pure idealogue seeking to expose its true nature. This is what I will call an &amp;ldquo;anthropic villain,&amp;rdquo; one which exists in the world only because the world has allowed them to exist, intentionally or not. Like the anthropic principle, the answer to &amp;ldquo;how does the universe have all necessary conditions to support intelligent life?&amp;rdquo; is that if it did not, there would be no one to ask such a question in the first place. If the Mob did not exist, if the corrupt politicians did not exist, if the Batman did not exist to counter them, the Joker would have no power because he would nothing to work against. But it is not any one of these figures which creates the Joker. If the Batman did not exist, the Joker still may. Rather, it is the entire society surrounding him which creates the conditions necessary for his existence.&lt;/p>
&lt;p>The anthropic villain is not merely a Shylock (&amp;ldquo;Thou call&amp;rsquo;dst me dog before thou hadst a cause; / But, since I am a dog, beware my fangs:&amp;rdquo;), that is someone turned evil by society&amp;rsquo;s prejudice, but rather a force of evil entirely unto themselves which nevertheless would have no power to cause harm without their surroundings making it so. The earliest example I can think of is the Serpent in the Garden of Eden. The Serpent would not exist unless God created him, nor would he have any power unless Eve had listened to him. It is not as though the Serpent started out good and was corrupted by society, rather he &lt;em>is&lt;/em> the corruption, the anarchy, the antimatter of the system. However, this does not mean the anthropic villain is Sauron either. Sauron existed already in a largely good and just world and his corruption of the elves and other races only went to serve his own quest for power. This is to say, Sauron was dangerous on his own. The Serpent did not strike Eve nor want anything else but the downfall of perfection. He did not want power as Sauron did.&lt;/p>
&lt;p>I find this character interesting on a philosophical level, but doubt it has any true utility as a recognized trope. Merely, it interested me because these characters are almost &amp;ldquo;glitches&amp;rdquo; in the system which only exist because of the system in the first place and yet who seek its downfall.&lt;/p></description></item><item><title>List of Online Commons</title><link>https://dustinnewman.net/posts/list-of-online-commons/</link><pubDate>Sat, 19 Feb 2022 13:16:11 -0800</pubDate><guid>https://dustinnewman.net/posts/list-of-online-commons/</guid><description>&lt;p>Drawing from the idea of the &amp;ldquo;Tragedy of the Commons,&amp;rdquo; I have decided to compile a running (i.e. this page is mutable) list of what I consider good example of online &amp;ldquo;commons&amp;rdquo; - spaces which benefit everyone greatly and may even be in popular use, but which are difficult to run in a way which rewards the owner/maintainer. This will also contain some general examples I have as an American Xillenial (too young for Usenet, too old for Discord) of what constitutes homegrown Internet content that is harder to monetize than larger, ad-driven things.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wikipedia.org">Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.asciitable.com">www.AsciiTable.com&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Phoneless Walks</title><link>https://dustinnewman.net/posts/phoneless-walks/</link><pubDate>Sun, 13 Feb 2022 18:06:03 -0800</pubDate><guid>https://dustinnewman.net/posts/phoneless-walks/</guid><description>&lt;p>I go for two walks per day, one in the morning and one at night, each lasting 20-30 minutes. I have found that my mood substantially improves when I go without a phone, headphones, or smart watch. I notice the color of the sky, the bird nests in the dead trees, the dandelions in lawns. I feel less anxious, more relaxed, and less agitated. My explanation for this is two fold. First, without a screen, I am able to visually and sensorially appreciate my surroundings, as previously described. Second, when you are walking with a screen in front of your face, you tend to only look up when things demand your attention. A cross walk, a loud noise, making room for other pedestrians. To attend to something. You are pulled from an alternate, virtual world where things appear from your whim into a physically intrusive one, which you have so far been ignoring. Given this framing, it is no wonder I find walking without a phone so much more pleasant, because I experience reality continuously, noticing all details as they appear, rather than discretely and only when I have to. What&amp;rsquo;s more, despite the virtual world being at my whim, I find the physical one, when fully appreciated, far more pleasant and rewarding when I return home. This may because my animal brain and body are &amp;ldquo;programmed&amp;rdquo; for the natural world rather than the digital, or it may be for some other. Either way, I will try to incorporate this into my routine more frequently.&lt;/p></description></item><item><title>Good, Meh, and Bad Names</title><link>https://dustinnewman.net/posts/good-bad-meh-names/</link><pubDate>Wed, 21 Jul 2021 19:10:13 -0700</pubDate><guid>https://dustinnewman.net/posts/good-bad-meh-names/</guid><description>&lt;blockquote>
&lt;p>&amp;ldquo;There are only two hard things in computer science: cache invalidation and naming things.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>In this post, I am going to be ranking various technologies or languages by the most important metric there is. The one metric that has stood the test of centuries, the thing that matters more than cycle count, memory usage, memory safety, and developer efficiency &lt;em>combined&lt;/em>. The one metric that has seen the fall of empires, the rise of sea levels, the birth and death of cable television. The one metric to rule them all: names.&lt;/p>
&lt;h2 id="materials">Materials&lt;/h2>
&lt;p>&lt;strong>Good&lt;/strong>: Ruby. Pretty, translucent. I think of glimmering edges and the word &amp;ldquo;sparkling.&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: Crystal. Someone took this challenge a little too literally IMO.&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: Chromium. Sleek, sure, but also chemical and boring.&lt;/p>
&lt;p>&lt;strong>Bad&lt;/strong>: Rust&amp;hellip; this was really dropping the ball. I mean, the first thing you want people to think of is some old, forgotten factory machine? It&amp;rsquo;s industrial, brutish, and dare I say downright unfashionable. Nothing &amp;ldquo;rust&amp;rdquo; conjures to the mind is pleasant. Least of all its (supposed) actual meaning: a fungus? I don&amp;rsquo;t care that these particular fungi were really cool. It&amp;rsquo;s still a bad name.&lt;/p>
&lt;p>&lt;strong>Bad&lt;/strong>: Perl. Apparently just &amp;ldquo;pearl&amp;rdquo; was already taken. I don&amp;rsquo;t like the way the R and the L blend together at the end: &amp;ldquo;earl.&amp;rdquo; It&amp;rsquo;s a little embarrassing. Not to mention it has five million different file endings and it took my boy Prolog&amp;rsquo;s, worst of all.&lt;/p>
&lt;h2 id="animals">Animals&lt;/h2>
&lt;p>&lt;strong>Good&lt;/strong>: Hadoop. It&amp;rsquo;s named after a founder&amp;rsquo;s son&amp;rsquo;s toy elephant. I will not be taking any further suggestions, comments, or critiques. A++&lt;/p>
&lt;p>&lt;strong>Good&lt;/strong>: Firefox. Fire is cool and foxes are cute so this one is already looking good. I don&amp;rsquo;t even care about the reason behind the name (although this comes up later in this post for those hunting for lore). It&amp;rsquo;s equally easy to design for with plenty of room for artistic license.&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: Pony. It&amp;rsquo;s a cute story but I&amp;rsquo;m not a huge fan of horses to be honest. I should look into Pony more. But for now it gets a meh.&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: Gopher (old Internet protocol). You know I love some spunk in my names. But a protocol isn&amp;rsquo;t where I want it (that costs extra)! Against something called &amp;ldquo;The Web,&amp;rdquo; is it really even a contest? &amp;ldquo;The Web&amp;rdquo; has a lot going for it that Gopher just doesn&amp;rsquo;t: a sense of grandiosity with &amp;ldquo;the,&amp;rdquo; a sense of optimistic ambition for a &lt;em>connected&lt;/em> world (get it?), and hey speaking of sense, the name also makes it. What do gophers have to do with retrieving documents? I think most people associate them with unsolicited holes in their yard.&lt;/p>
&lt;p>&lt;strong>Bad&lt;/strong>: GNU. Now let&amp;rsquo;s get one thing straight before the herd tramples me. &amp;ldquo;GNU is an acronym for ‘GNU&amp;rsquo;s Not Unix&amp;rsquo;!&amp;rdquo; Yes, but why the G? RMS could&amp;rsquo;ve picked any letter if that was the only requirement. It could&amp;rsquo;ve been &amp;ldquo;SNU: SNU&amp;rsquo;s Not Unix,&amp;rdquo; but it&amp;rsquo;s not. And why is it not? Because &amp;ldquo;gnu&amp;rdquo; is a real word and &amp;ldquo;it was fun to say.&amp;rdquo; &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (You&amp;rsquo;re definitely speaking for yourself there, Stallman) And what&amp;rsquo;s a gnu? Well, it&amp;rsquo;s an animal, more commonly known as a wildebeest. So I think it&amp;rsquo;s fair to say that GNU was in fact, in some way, named after the wildebeest. -10 points just for me having to explain this. -100 points for just… being a really bad name. Hard to say, doesn&amp;rsquo;t mean anything, no one on planet Earth calls it a &amp;ldquo;gnu&amp;rdquo; instead of a wildebeest, plus I&amp;rsquo;m really sorry to say this, really my heart is overflowing but: wildebeests aren&amp;rsquo;t cute.&lt;/p>
&lt;h2 id="acronyms">Acronyms&lt;/h2>
&lt;p>&lt;strong>Good&lt;/strong>: ALGOL - Algorithmic/Algebraic Language. Sounds like a frog in the best way possible. Yet there is a certain majesty to it too. A majestic frog. I don&amp;rsquo;t even care about the G and the L being so close together and making an awkward &amp;ldquo;gull&amp;rdquo; sound because I feel like a frog when I say it.&lt;/p>
&lt;p>&lt;strong>Good&lt;/strong>: LISP - List Processor. Short, sweet, tells you what it&amp;rsquo;s about all in four letters. I get very purple energies from LISP. Bonus points for the fact that anyone with a lisp will say &amp;ldquo;lithp prothethor.&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: FORTRAN - Formula Translator. It reminds me of Nascar or some race car. The name is undeniably a good fit however, so I&amp;rsquo;ll let it slide.&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: AWK - Aho, Weinberger, Kernighan. It&amp;rsquo;s a little awk that it also means &amp;ldquo;awkward&amp;rdquo; in teenspeak, but not a huge problem. It&amp;rsquo;s surprisingly easy to Google and cute that they put all their names together like that. It&amp;rsquo;s like a friendship bracelet and that deserves some recognition in today&amp;rsquo;s age.&lt;/p>
&lt;p>&lt;strong>Bad&lt;/strong>: APL - A Programming Language. Borderline rude for it to take such an iconic name for itself. At least it should stand for &amp;ldquo;Array Programming Language.&amp;rdquo; I might be able to be convinced to bump it up to &amp;ldquo;meh&amp;rdquo; if people pronounced it &amp;ldquo;apple,&amp;rdquo; but everyone I&amp;rsquo;ve heard has said /eɪ.pi.ɛl/ (ay-pee-ell) which is just awkward.&lt;/p>
&lt;h2 id="feminine-names">Feminine Names&lt;/h2>
&lt;p>I simply must draw attention to the fact that names in CS from actual human names are (almost) always female or feminine. I&amp;rsquo;m sure I&amp;rsquo;ll write about that later.&lt;/p>
&lt;p>&lt;strong>Good&lt;/strong>: Julia. This is a comforting name. The name of a girl with a good smile and good taste in food and clothes. I trust her.&lt;/p>
&lt;p>&lt;strong>Good&lt;/strong>: MySQL. Named after the creator&amp;rsquo;s daughter My. It&amp;rsquo;s good because it also works just as the pronoun &amp;ldquo;my&amp;rdquo; and makes you feel comfy.&lt;/p>
&lt;p>&lt;strong>Good&lt;/strong>: Debian. It&amp;rsquo;s a blend of a female name (Debra) and the male creator&amp;rsquo;s name, Ian. With that alone, it would be a meh. But the name itself just sounds so cool.&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: MariaDB. Same trick as &amp;ldquo;MySQL&amp;rdquo; and same guy too, but &amp;ldquo;Maria&amp;rdquo; isn&amp;rsquo;t a pronoun so I feel no ownership here. This isn&amp;rsquo;t my SQL, this is Maria&amp;rsquo;s!&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: (Apache) Cassandra. Too long. Greek myth programming cliche (looking at you Kubernetes). It&amp;rsquo;s a pretty name though.&lt;/p>
&lt;p>&lt;strong>Bad&lt;/strong>: (Microsoft) Cortana. Named after a character from the Halo games. Show me a real woman named &amp;ldquo;Cortana,&amp;rdquo; Microsoft. I dare you. And even if or when you do, I still won&amp;rsquo;t change my ranking because the name itself sucks! It sounds so futuristic it&amp;rsquo;s almost cold and unbelievable. If you want people to talk to an AI you forcibly embed on their computers, maybe at least pick a name that doesn&amp;rsquo;t &lt;em>feel&lt;/em> like a robot forcibly embedded in a computer?&lt;/p>
&lt;h2 id="fiction">Fiction&lt;/h2>
&lt;p>&lt;strong>Good&lt;/strong>: Mozilla. Comes from Godzilla. What&amp;rsquo;s not to love? Giant lizard? Check. Cool name? Check. Has a &amp;ldquo;z&amp;rdquo;? Check. It&amp;rsquo;s a home run baby!&lt;/p>
&lt;p>&lt;strong>Good&lt;/strong>: Kubernetes. Love it or hate it, this name has it all. Easily Googleable (or is that for different reasons?), meaningful name, unique, enterprise friendly. My only complaint is that it is probably hard to pronounce when you&amp;rsquo;re starting out, but maybe that&amp;rsquo;s secretly a pro? Quick, say &amp;ldquo;shibboleth,&amp;rdquo; I won&amp;rsquo;t judge, I promise.&lt;/p>
&lt;p>&lt;strong>Meh&lt;/strong>: Django. It has nothing to do with the project, might be hard to pronounce for some people, and isn&amp;rsquo;t particularly charming, but it gets bonus points because it does sound cool and it comes from an even cooler film.&lt;/p>
&lt;p>&lt;strong>Bad&lt;/strong>: Phoenix (web framework but also 10,000 other things). Scratch all other mentions of &amp;ldquo;cliche&amp;rdquo; off this list because THIS right here is the granddaddy cliche of them all. Listen, I get it. Phoenixes are cool. Fire is cool. Hell, birds are cool (now &amp;ldquo;hellbird&amp;rdquo; has a ring to it but I can&amp;rsquo;t imagine a manager signing off on using &amp;ldquo;hellbird&amp;rdquo; for a project). But this has truly been done so many times the name coming back is itself like the phoenix rising from the ashes after the last project that used it died. The fact that no big project of the countless that have tried has been able to Make It using this name should tell you something. (Lore: Firefox was originally called Phoenix and I like to believe that 80% of its success is due to that name change.)&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://www.gnu.org/gnu/gnu-history.en.html">https://www.gnu.org/gnu/gnu-history.en.html&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Don't Blame C Part I</title><link>https://dustinnewman.net/posts/dont-blame-c-part-i/</link><pubDate>Wed, 21 Jul 2021 06:03:00 -0700</pubDate><guid>https://dustinnewman.net/posts/dont-blame-c-part-i/</guid><description>&lt;p>Yet another &lt;a href="https://www.openwall.com/lists/oss-security/2021/07/20/1">security vulnerability&lt;/a> has been disclosed in the Linux kernel, this one dealing with gaining root access from a user land program. The root cause is a &lt;code>size_t&lt;/code> argument being passed as a (signed) &lt;code>int&lt;/code>. This has people maligning C for being unsafe, unstable, and unreliable, all of which are true. But I feel compelled to defend the elderly in all things, especially when they are programming languages, and so I will do so here. Your logic may vary.&lt;/p>
&lt;p>The way I see it, a parameter named &amp;ldquo;buflen&amp;rdquo; should &lt;strong>never&lt;/strong>, &lt;em>ever&lt;/em>, &lt;strong>ever&lt;/strong> have a signed type. You hear that, Linus? Better get grepping, you old Finn. Why should it? Length can never be a negative value, only zero. So why would any sane API accept -1 as a valid length? Of course, when I say it in such plain terms this may seem obvious. I&amp;rsquo;m sure the writer of this phony API would never agree to a statement like &amp;ldquo;length can be negative.&amp;rdquo; And yet… that is precisely what you are saying when you write:&lt;/p>
&lt;pre>&lt;code class="language-c">char *dentry_path(struct dentry *dentry, char *buf, int buflen)
&lt;/code>&lt;/pre>
&lt;p>Ah, god, it hurts my eyes to just look at this. I advise you to scroll away for your own posterity, dear reader. Such affronts belong not in a civilized society. Of course, the correct way to write this is with &lt;code>size_t buflen&lt;/code> and then we wouldn&amp;rsquo;t be having this issue and then Twitter wouldn&amp;rsquo;t be collectively jumping around a bonfire burning the limbs of C in an effigy and then I could get some sleep at night. Well, not since I got this strange doll from the thrift store.&lt;/p>
&lt;p>This should be standard in every embedded or kernel development interview. I guess I blame… people teaching C. Why does every C tutorial and even published book start with &lt;code>int x&lt;/code> when you never see negative values assigned? For example, K&amp;amp;R, perhaps &lt;em>the&lt;/em> standard C reference, has on page 18:&lt;/p>
&lt;pre>&lt;code class="language-c">long nc;
nc = 0;
while (getchar() != EOF)
++nc;
&lt;/code>&lt;/pre>
&lt;p>How baffling that K&amp;amp;R thought using the slightly more efficient pre-increment operator is more important than using the correct type. Especially to beginners. &lt;code>nc&lt;/code> has no business being &lt;code>long&lt;/code>. I get it: &amp;ldquo;int&amp;rdquo; is fewer characters and you don&amp;rsquo;t want to scare away beginners using incantations like &amp;ldquo;unsigned&amp;rdquo; or &amp;ldquo;size underscore t.&amp;rdquo; Everybody already knows what an &amp;ldquo;integer&amp;rdquo; is, or has at least heard of one. However, I think C instructors are forgetting one key fact:&lt;/p>
&lt;p>A hostage audience.&lt;/p>
&lt;p>No one learning C really has a choice. Either they&amp;rsquo;re taking CS 101 or they&amp;rsquo;re job hunting and want an extra tag in the &amp;ldquo;skills&amp;rdquo; box. Since you have them between a rock and a hard place, you can kind of teach them whatever you want. I&amp;rsquo;m not suggesting we start with &lt;code>char (*(*x())[5])()&lt;/code> but maybe getting it in early that &amp;ldquo;types have meanings&amp;rdquo; would be a good thing. Maybe, just maybe, it would prevent issues like the Linux kernel bug from being written in the first place. Maybe we could even turn the tide against &amp;ldquo;int as default&amp;rdquo; which is easily one of the worst trends in computer science.&lt;/p>
&lt;p>Of course, it&amp;rsquo;s much easier to blame C though. Dang nabbit you, Dennis Ritchie!&lt;/p></description></item><item><title>Headache Design</title><link>https://dustinnewman.net/posts/headache-ui/</link><pubDate>Tue, 04 May 2021 20:00:00 -0700</pubDate><guid>https://dustinnewman.net/posts/headache-ui/</guid><description>&lt;p>I am genetically prone to get headaches and migraines. Since I was around five or six, I have learned a variety of coping mechanisms, from taking pain relievers early to hot baths to green lights. &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> Looking at a screen is never good for head pain, but in 2021, we can&amp;rsquo;t always avoid it. Sometimes it&amp;rsquo;s for work, sometimes it&amp;rsquo;s for paying a bill or other bookkeeping, other times it&amp;rsquo;s just for fun because who wants to lay in bed alone in the dark with a warm washcloth for hours? I have compiled a few life-saving tips over the years for using electronics when your body wants to do anything but, and thought I&amp;rsquo;d share them.&lt;/p>
&lt;h2 id="night-shift">Night Shift&lt;/h2>
&lt;p>The first one is &amp;ldquo;night shift,&amp;rdquo; or whatever the name is for increasing the warmness of the display. This is proven to be good for sleep, but I have also found it useful for headaches. Blue light in general is awful for the eyes and this is doubly true when you have a headache. Don&amp;rsquo;t be afraid to max this one out.&lt;/p>
&lt;h2 id="reader-view">Reader View&lt;/h2>
&lt;p>Most of the web is terrible. I said it. Ads pop up, pages jump around as elements dynamically teleport in, inconsistent fonts, small text, everyone wants you to agree to their cookie policy or convert to their newsletter, it&amp;rsquo;s just too much for the brain under distress. Reader View solves this problem for me. It presents one unified page, with no jumping, popping, or agreeing in sight. I wish every website was Reader View-ified, even when I don&amp;rsquo;t have a headache. The problem with this is PDFs. I long for the day we can convert PDFs to HTML/text reliably but it seems unlikely since very few people besides me would really want this. The entire appeal of PDFs is being able to preserve the layout exactly as you intended, but whoever forgot night mode or responsivity clearly never had a migraine. PDFs are usually the apple of my eye: small, standardized, and portable. They really live up to their name in that way. But when I just took a couple Excedrin and am praying for the sun to take a day off, they are the devil incarnate, hand-crafted by Adobe to inflict maximum damage (at least they don&amp;rsquo;t have pop-ups).&lt;/p>
&lt;h2 id="dark-mode">Dark Mode&lt;/h2>
&lt;p>One of the greatest inventions of the 21st century: dark mode. Even though I am not as evangelical as many others and still prefer light modes in daytime, going dark is a must if you have a headache. The best kinds of sites (including this one :)) auto-detect the system theme and adapt accordingly, but some others have separate buttons or switches too. As long as the option is there, it&amp;rsquo;s appreciated. Just be careful not to squint. It&amp;rsquo;s common when we&amp;rsquo;re staring at screens to squint and unfortunately we carry that habit over to dark themes even though they reduce the need. Fight the urge to squint and save yourself some tension in those temples. Breatheee.&lt;/p>
&lt;h2 id="reduce-everything">Reduce Everything&lt;/h2>
&lt;p>You don&amp;rsquo;t realize how much your phone… &lt;em>moves&lt;/em> until you disable it. Transparent UIs, low contrast &amp;ldquo;aesthetic&amp;rdquo; designs, and animations so busy they seem choreographed all contribute to eye strain. I recommend reducing the white point, transparency, and motion if possible. The only thing to increase is the contrast, as that also reduces the work your delicate eyes need to do. I swear designers have never had headaches in their lives or they would never throw in so much glass, blur, frosting, and translucency effects. I&amp;rsquo;ll admit: it definitely looks better with them enabled, but I honestly wonder how much, if any, toll it takes on our brains or vision centers over time.&lt;/p>
&lt;p>Next time you&amp;rsquo;re lying in agony waiting for those painkillers to kick in and to get on with your life, I know the temptation to grab that phone is strong. And I&amp;rsquo;m not gonna tell you to resist! Sometimes you can&amp;rsquo;t avoid it. But I hope these tips might help save you some pain along the way.&lt;/p>
&lt;p>Oh, and look into green/multi-colored lights. They work amazingly well.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://hms.harvard.edu/news/green-light-migraine-relief">https://hms.harvard.edu/news/green-light-migraine-relief&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>How to use CSS with native dark mode</title><link>https://dustinnewman.net/posts/dark-mode-css/</link><pubDate>Mon, 16 Dec 2019 12:00:00 -0700</pubDate><guid>https://dustinnewman.net/posts/dark-mode-css/</guid><description>&lt;p>With iOS 13, I have been enjoying not just the beautiful new dark mode, but the automatic transition after sunset. It&amp;rsquo;s easier on my eyes and keeps me conscious of using technology too much before bed. That said, the native dark mode is only for native apps. Or is it?&lt;/p>
&lt;p>I thought it would be nice if there were CSS selectors capable of targeting users&amp;rsquo; native preferences on the matter and luckily Apple did not disappoint. In &lt;a href="https://webkit.org/blog/8840/dark-mode-support-in-webkit/">this tutorial post&lt;/a> from the WebKit blog, they introduce the &lt;code>color-scheme&lt;/code> CSS property, which supports both &lt;code>light&lt;/code> and &lt;code>dark&lt;/code> values. I was drawn to this solution over the DIY option (which usually involves some sort of moon icon) because it offers:&lt;/p>
&lt;ol>
&lt;li>Less UI complexity&lt;/li>
&lt;li>More seamless integration with the user&amp;rsquo;s system&lt;/li>
&lt;li>No JavaScript logic required&lt;/li>
&lt;/ol>
&lt;p>All wins in my book, so let&amp;rsquo;s get started! (For this blog, I use SCSS, but I only use the SCSS variables for media queries and the rest of this tutorial uses regular CSS variables.)&lt;/p>
&lt;p>Add this snippet to your top-most styling file (for me, it was my &lt;code>main.scss&lt;/code>):&lt;/p>
&lt;pre>&lt;code>:root {
color-scheme: light dark;
}
&lt;/code>&lt;/pre>
&lt;p>This tells the browser that your site supports both &lt;code>light&lt;/code> and &lt;code>dark&lt;/code> themes. By itself, however, it&amp;rsquo;s not super useful, so let&amp;rsquo;s define some variables that we can switch depending on the theme.&lt;/p>
&lt;pre>&lt;code>:root {
color-scheme: light dark;
--bg-color: #fcfcff;
--text-color: #000000;
}
&lt;/code>&lt;/pre>
&lt;p>Here, we use an off-white as the background color and pure black as the text color. I strongly recommend using functional names rather than descriptive (i.e. &lt;code>bg-color&lt;/code> instead of &lt;code>off-white&lt;/code>) because it allows us to use the same variable declarations with only one media query, rather than using a media query each time we want to use either &lt;code>off-white&lt;/code> or the dark-theme counterpart.&lt;/p>
&lt;p>Now the magic!&lt;/p>
&lt;pre>&lt;code>@media (prefers-color-scheme: dark) {
:root {
--bg-color: #121212;
--text-color: #fcfcfc;
}
}
&lt;/code>&lt;/pre>
&lt;p>With one media query, we re-define our variables so that the &lt;em>text&lt;/em> is now off-white and the background is off-black. To apply this, let&amp;rsquo;s use our main &lt;code>body&lt;/code> element as an example.&lt;/p>
&lt;pre>&lt;code>body {
background-color: var(--bg-color);
color: var(--text-color);
}
&lt;/code>&lt;/pre>
&lt;p>Now our &lt;code>body&lt;/code> will use the &lt;code>bg-color&lt;/code> variable which, if the user prefers dark mode, will be an off-black! Nice! I hope this mini-tutorial was helpful and that you see the advantages of this way over rolling your own moon icon; although I&amp;rsquo;ll admit that might be a bit more fun.&lt;/p></description></item></channel></rss>