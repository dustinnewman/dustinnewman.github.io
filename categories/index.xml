<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Categories on Dustin Newman</title><link>https://dustinnewman.net/categories/</link><description>Recent content in Categories on Dustin Newman</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dustinnewman.net/categories/index.xml" rel="self" type="application/rss+xml"/><item><title>Stable Diffusion Gallery</title><link>https://dustinnewman.net/posts/stable-diffusion-gallery/</link><pubDate>Sat, 24 Sep 2022 18:17:58 -0700</pubDate><guid>https://dustinnewman.net/posts/stable-diffusion-gallery/</guid><description>&lt;p>I have been playing with &lt;a href="https://github.com/CompVis/stable-diffusion">Stable Diffusion&lt;/a> lately, as I am sure many have. I thought it would be worthwhile to publish some of my favorites along with the prompts and seeds for each image. All images have a &amp;ldquo;classifier free guidance (CFG) scale&amp;rdquo; (or simply &amp;ldquo;guidance&amp;rdquo;) value of 7.5; are 512 by 512 pixels; use the k_lms sampler; and use 50 steps. The seeds are marked after the prompt after the -S flag.&lt;/p>
&lt;p>&amp;ldquo;Portrait of a green frog wearing a deep red velvet robe and golden crown, oil painting by Hyacinthe Rigaud, baroque, rich&amp;rdquo; -S3173279521
&lt;img src="./frog_with_crown.png" alt="Frog wearing a crown">&lt;/p>
&lt;p>&amp;ldquo;Impressionist painting of green frog with red eyes by Van Gogh, impressionist&amp;rdquo; -S4232807157
&lt;img src="./van_gogh_frog_close.png" alt="Frog by Van Gogh">&lt;/p>
&lt;p>&amp;ldquo;Impressionist painting of green frog with red eyes in grass meadow, by Van Gogh, impressionist&amp;rdquo; -S2854560348
&lt;img src="./van_gogh_frog_meadow.png" alt="Frog in a meadow by Van Gogh">&lt;/p>
&lt;p>&amp;ldquo;Portrait of a green frog wearing a deep red velvet robe and golden crown, oil painting by Hyacinthe Rigaud, baroque, rich&amp;rdquo; -S1372305360
&lt;img src="./robed_frog.png" alt="Frog in robe">&lt;/p>
&lt;p>&amp;ldquo;a matte painting of an old stone gothic castle on a cliff over the sea at night, creepy, dark, gothic, stormy, masterpiece, artstation&amp;rdquo; -S4153617768
&lt;img src="./creepy_castle.png" alt="Creepy castle">&lt;/p>
&lt;p>&amp;ldquo;Cozy house in the woods, anime, oil painting by Josef Thoma, high resolution, cottagecore, Studio Ghibli inspired, 4k&amp;rdquo; -S2819016467
&lt;img src="./cottage.png" alt="Tree cottage">&lt;/p>
&lt;p>&amp;ldquo;The sun and the moon, roman mosaic&amp;rdquo; -S3992813662
&lt;img src="./sun_mosaic.png" alt="Sun and moon mosaic">&lt;/p>
&lt;p>&amp;ldquo;A white ice palace with tall pillars and an ice throne in the center, by Josef Thoma, matte painting, detailed, 4k&amp;rdquo; -S3712115669
&lt;img src="./ice_pillars.png" alt="Ice pillars">&lt;/p>
&lt;p>&amp;ldquo;overgrown foliage overtaking tall destroyed buildings, biopunk, scenery, professional, award-winning, trending on artstation, detailed, realistic, beautiful, emotional, shiny, golden, picture, antview, close up&amp;rdquo; -S1483373964
&lt;img src="./plants_dystopia.png" alt="Dystopia with plants">&lt;/p>
&lt;p>&amp;ldquo;A beautiful mountain landscape on an ancient scroll, ink brush painting, traditional Chinese, by Ma Yuan&amp;rdquo; -S2983311206
&lt;img src="./ink_brush_painting_mountains.png" alt="Ink brush painting of mountains">&lt;/p>
&lt;p>&amp;ldquo;snow covered mountains in chinese watercolor painting, landscape, masterpiece, ancient&amp;rdquo; -S3991627781
&lt;img src="./chinese_snow.png" alt="Snow covered mountains">&lt;/p>
&lt;p>&amp;ldquo;two people in a snowy mountain village, snow falling from the sky, japanese watercolor painting, color and ink on scroll, by hokusai, landscape painting, masterpiece, ancient&amp;rdquo; -S2964261701
&lt;img src="./japanese_snow.png" alt="Snowy mountain village">&lt;/p>
&lt;p>&amp;ldquo;large persian mosque in the middle of waterfall in chinese watercolor painting, oil painting, masterpiece, aesthetic&amp;rdquo; -S392247870
&lt;img src="./persian_waterfall.png" alt="Waterfall over stones">&lt;/p></description></item><item><title>Free Software Moments</title><link>https://dustinnewman.net/posts/free-software-moments/</link><pubDate>Mon, 06 Jun 2022 22:24:16 -0700</pubDate><guid>https://dustinnewman.net/posts/free-software-moments/</guid><description>&lt;p>This is a running page cataloging good examples of why free software is needed in the modern world.&lt;/p>
&lt;ul>
&lt;li>Reddit requiring login or usage of the mobile app (therefore login) to view comments.&lt;/li>
&lt;li>Pinterest gaming SEO to saturate queries and then locking those results behind a login wall.&lt;/li>
&lt;li>Twitter increasingly pressuring anonymous users to login to view tweets.
&lt;ul>
&lt;li>Update (May 2022): This is now a hard login wall after viewing a couple of tweets.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Elon Musk saying he will &amp;ldquo;authenticate all humans.&amp;rdquo;&lt;/li>
&lt;li>Treadmills advertising free workout courses while operating (safety hazard).&lt;/li>
&lt;li>Smart TVs running banner ads.&lt;/li>
&lt;/ul></description></item><item><title>Cascading Style S-Expressions</title><link>https://dustinnewman.net/posts/lisp-css/</link><pubDate>Sun, 03 Apr 2022 19:44:12 -0700</pubDate><guid>https://dustinnewman.net/posts/lisp-css/</guid><description>&lt;p>Since I first learned it, Lisp has fascinated me. Not enough to seriously use it beyond projects for college, mind you, but enough where - years later - I’m working on something completely random and the thought crosses my mind “It would be fun to implement this in Lisp,” especially using + as a function, same as any other, in full prefix notation, something even the noble and esteemed Haskell couldn’t seem to commit to. Beyond the simple grammar and elegance, there is something about Lisp which feels fundamental to computation itself, likely the similarity to lambda calculus, which actually &lt;em>is&lt;/em> fundamental to computation itself. Sadly, Lisp is rarely used much of anywhere nowadays except as a novelty or pet project. This is strange, considering that Brendan Eich was inspired by Scheme while designing JavaScript. You would think there would be a more direct influence.&lt;/p>
&lt;p>Fortunately for us, it doesn’t have to be that way. I have long thought of writing CSS is a Lisp-style syntax. I’m not sure why exactly. Something about it just &lt;em>feels&lt;/em> right. Simple. For maximum confusion, I have decided to name this &lt;strong>Cascading Style S-Expressions&lt;/strong>: CSS for short.&lt;/p>
&lt;p>Now, I’m not gonna claim that we can bring Lisp to the web. Lisp’s acolytes are a devout and proud people, who would scoff at the claim that CSS properties and markup even come close to represent the power and beauty of Lisp. And this is correct on some level. CSS is a language for configuration, not computation. There are no functions, no inputs or outputs, no arithmetic, none of that. Just a bunch of key-value pairs.&lt;/p>
&lt;p>That said, I’m gonna do it anyways because, like I said, it’s fun. There are some parts of Lisp which fit nicely with CSS. The nesting of S-expressions is a cleaner way to combine selectors; the extremely simple syntax (the only special characters are parentheses) eschews semicolons, colons, and braces; and honestly something about CSS has just always felt Lisp-y to me. But mostly this is just for fun and an itch being scratched. The quintessential example, what every CSS tutorial starts with, is setting the background-color of the body element.&lt;/p>
&lt;pre>&lt;code>(body color red)
&lt;/code>&lt;/pre>
&lt;p>Here the first atom is the selector: the &lt;code>body&lt;/code> element. The next two atoms are actually a pair: the property (color) and its value (red). Together these make up a CSS rule which is just setting one property to some value. This is equivalent to the CSS configuration:&lt;/p>
&lt;pre>&lt;code>body {
color: red;
}
&lt;/code>&lt;/pre>
&lt;p>Can you feel the aesthetic purity already? I sure can. Multiple rules can be chained together by just repeating these pairs.&lt;/p>
&lt;pre>&lt;code>(body color red font-size 14px)
&lt;/code>&lt;/pre>
&lt;p>I’m gonna assume you already know what this would be equivalent too, so I’m not gonna write it out anymore. The real star of the show though, is nested selectors. Compared to CSS where you have no way to nest without writing an entirely new rule set, CSS (Lisp-style) allows you to specify rules for the current selector, and then nest any children in that same rule set. For example, a common use case when styling a navigation bar that uses an unordered list behind the scenes is to get rid of the styling for both the list and the links within the nav bar. In regular CSS, this is two separate rule sets (one for &lt;code>ul&lt;/code> and one for &lt;code>ul li a&lt;/code>), but in our CSS, it’s just one straight line.&lt;/p>
&lt;pre>&lt;code>(ul list-style none (li (a text-decoration none)))
&lt;/code>&lt;/pre>
&lt;p>Allowing the children to be specified as sub-S-expressions is immensely satisfying to me, as I find it better clarifies the relationship between the selectors. Of course, we can also have CSS properties that are more than one word, or contain spaces, the most common being the margin shorthand taking up to four parameters of the border shorthand taking three. For this, I overload the parentheses to create lists. In proper Lisp notation, these would start with a single quote.&lt;/p>
&lt;pre>&lt;code>(body margin (0px 8px 0px 8px) border (1px solid black))
&lt;/code>&lt;/pre>
&lt;p>This is actually not ambiguous to the parser because all rules come in pairs of two: property and value. The nested S-expressions will then be those that don’t follow a property. And what about if you have two S-expressions right next to each other? How do we tell them apart from a rule? Simple: properties cannot contain spaces and thus cannot be listed in parentheses. Therefore, in this case we would have two S-expressions and not a rule.&lt;/p>
&lt;p>If you would like to try this out for yourself, the code is &lt;a href="https://github.com/dustinnewman/cascading-style-s-expressions">open-source&lt;/a> but who wants to go through all the work of pulling and compiling my parser? For that reason, there is also an &lt;a href="https://dustinnewman.net/cascading-style-s-expressions/">online demo&lt;/a> I put together with my first time using WASM. The page is pre-populated with the stylings of that page and you can dynamically edit the CSS to see your Lisp applied. I might end up using this on my own site, the very one you’re reading right now, but time will tell if I have the patience to integrate all of this into Hugo or not.&lt;/p></description></item><item><title>List of Online Commons</title><link>https://dustinnewman.net/posts/list-of-online-commons/</link><pubDate>Sat, 19 Feb 2022 13:16:11 -0800</pubDate><guid>https://dustinnewman.net/posts/list-of-online-commons/</guid><description>&lt;p>Drawing from the idea of the &amp;ldquo;Tragedy of the Commons,&amp;rdquo; I have decided to compile a running (i.e. this page is mutable) list of what I consider good example of online &amp;ldquo;commons&amp;rdquo; - spaces which benefit everyone greatly and may even be in popular use, but which are difficult to run in a way which rewards the owner/maintainer. This will also contain some general examples I have as an American Xillenial (too young for Usenet, too old for Discord) of what constitutes homegrown Internet content that is harder to monetize than larger, ad-driven things.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wikipedia.org">Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.asciitable.com">www.AsciiTable.com&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Don't Blame C Part I</title><link>https://dustinnewman.net/posts/dont-blame-c-part-i/</link><pubDate>Wed, 21 Jul 2021 06:03:00 -0700</pubDate><guid>https://dustinnewman.net/posts/dont-blame-c-part-i/</guid><description>&lt;p>Yet another &lt;a href="https://www.openwall.com/lists/oss-security/2021/07/20/1">security vulnerability&lt;/a> has been disclosed in the Linux kernel, this one dealing with gaining root access from a user land program. The root cause is a &lt;code>size_t&lt;/code> argument being passed as a (signed) &lt;code>int&lt;/code>. This has people maligning C for being unsafe, unstable, and unreliable, all of which are true. But I feel compelled to defend the elderly in all things, especially when they are programming languages, and so I will do so here. Your logic may vary.&lt;/p>
&lt;p>The way I see it, a parameter named &amp;ldquo;buflen&amp;rdquo; should &lt;strong>never&lt;/strong>, &lt;em>ever&lt;/em>, &lt;strong>ever&lt;/strong> have a signed type. You hear that, Linus? Better get grepping, you old Finn. Why should it? Length can never be a negative value, only zero. So why would any sane API accept -1 as a valid length? Of course, when I say it in such plain terms this may seem obvious. I&amp;rsquo;m sure the writer of this phony API would never agree to a statement like &amp;ldquo;length can be negative.&amp;rdquo; And yet… that is precisely what you are saying when you write:&lt;/p>
&lt;pre>&lt;code class="language-c">char *dentry_path(struct dentry *dentry, char *buf, int buflen)
&lt;/code>&lt;/pre>
&lt;p>Ah, god, it hurts my eyes to just look at this. I advise you to scroll away for your own posterity, dear reader. Such affronts belong not in a civilized society. Of course, the correct way to write this is with &lt;code>size_t buflen&lt;/code> and then we wouldn&amp;rsquo;t be having this issue and then Twitter wouldn&amp;rsquo;t be collectively jumping around a bonfire burning the limbs of C in an effigy and then I could get some sleep at night. Well, not since I got this strange doll from the thrift store.&lt;/p>
&lt;p>This should be standard in every embedded or kernel development interview. I guess I blame… people teaching C. Why does every C tutorial and even published book start with &lt;code>int x&lt;/code> when you never see negative values assigned? For example, K&amp;amp;R, perhaps &lt;em>the&lt;/em> standard C reference, has on page 18:&lt;/p>
&lt;pre>&lt;code class="language-c">long nc;
nc = 0;
while (getchar() != EOF)
++nc;
&lt;/code>&lt;/pre>
&lt;p>How baffling that K&amp;amp;R thought using the slightly more efficient pre-increment operator is more important than using the correct type. Especially to beginners. &lt;code>nc&lt;/code> has no business being &lt;code>long&lt;/code>. I get it: &amp;ldquo;int&amp;rdquo; is fewer characters and you don&amp;rsquo;t want to scare away beginners using incantations like &amp;ldquo;unsigned&amp;rdquo; or &amp;ldquo;size underscore t.&amp;rdquo; Everybody already knows what an &amp;ldquo;integer&amp;rdquo; is, or has at least heard of one. However, I think C instructors are forgetting one key fact:&lt;/p>
&lt;p>A hostage audience.&lt;/p>
&lt;p>No one learning C really has a choice. Either they&amp;rsquo;re taking CS 101 or they&amp;rsquo;re job hunting and want an extra tag in the &amp;ldquo;skills&amp;rdquo; box. Since you have them between a rock and a hard place, you can kind of teach them whatever you want. I&amp;rsquo;m not suggesting we start with &lt;code>char (*(*x())[5])()&lt;/code> but maybe getting it in early that &amp;ldquo;types have meanings&amp;rdquo; would be a good thing. Maybe, just maybe, it would prevent issues like the Linux kernel bug from being written in the first place. Maybe we could even turn the tide against &amp;ldquo;int as default&amp;rdquo; which is easily one of the worst trends in computer science.&lt;/p>
&lt;p>Of course, it&amp;rsquo;s much easier to blame C though. Dang nabbit you, Dennis Ritchie!&lt;/p></description></item><item><title>How to use CSS with native dark mode</title><link>https://dustinnewman.net/posts/dark-mode-css/</link><pubDate>Mon, 16 Dec 2019 12:00:00 -0700</pubDate><guid>https://dustinnewman.net/posts/dark-mode-css/</guid><description>&lt;p>With iOS 13, I have been enjoying not just the beautiful new dark mode, but the automatic transition after sunset. It&amp;rsquo;s easier on my eyes and keeps me conscious of using technology too much before bed. That said, the native dark mode is only for native apps. Or is it?&lt;/p>
&lt;p>I thought it would be nice if there were CSS selectors capable of targeting users&amp;rsquo; native preferences on the matter and luckily Apple did not disappoint. In &lt;a href="https://webkit.org/blog/8840/dark-mode-support-in-webkit/">this tutorial post&lt;/a> from the WebKit blog, they introduce the &lt;code>color-scheme&lt;/code> CSS property, which supports both &lt;code>light&lt;/code> and &lt;code>dark&lt;/code> values. I was drawn to this solution over the DIY option (which usually involves some sort of moon icon) because it offers:&lt;/p>
&lt;ol>
&lt;li>Less UI complexity&lt;/li>
&lt;li>More seamless integration with the user&amp;rsquo;s system&lt;/li>
&lt;li>No JavaScript logic required&lt;/li>
&lt;/ol>
&lt;p>All wins in my book, so let&amp;rsquo;s get started! (For this blog, I use SCSS, but I only use the SCSS variables for media queries and the rest of this tutorial uses regular CSS variables.)&lt;/p>
&lt;p>Add this snippet to your top-most styling file (for me, it was my &lt;code>main.scss&lt;/code>):&lt;/p>
&lt;pre>&lt;code>:root {
color-scheme: light dark;
}
&lt;/code>&lt;/pre>
&lt;p>This tells the browser that your site supports both &lt;code>light&lt;/code> and &lt;code>dark&lt;/code> themes. By itself, however, it&amp;rsquo;s not super useful, so let&amp;rsquo;s define some variables that we can switch depending on the theme.&lt;/p>
&lt;pre>&lt;code>:root {
color-scheme: light dark;
--bg-color: #fcfcff;
--text-color: #000000;
}
&lt;/code>&lt;/pre>
&lt;p>Here, we use an off-white as the background color and pure black as the text color. I strongly recommend using functional names rather than descriptive (i.e. &lt;code>bg-color&lt;/code> instead of &lt;code>off-white&lt;/code>) because it allows us to use the same variable declarations with only one media query, rather than using a media query each time we want to use either &lt;code>off-white&lt;/code> or the dark-theme counterpart.&lt;/p>
&lt;p>Now the magic!&lt;/p>
&lt;pre>&lt;code>@media (prefers-color-scheme: dark) {
:root {
--bg-color: #121212;
--text-color: #fcfcfc;
}
}
&lt;/code>&lt;/pre>
&lt;p>With one media query, we re-define our variables so that the &lt;em>text&lt;/em> is now off-white and the background is off-black. To apply this, let&amp;rsquo;s use our main &lt;code>body&lt;/code> element as an example.&lt;/p>
&lt;pre>&lt;code>body {
background-color: var(--bg-color);
color: var(--text-color);
}
&lt;/code>&lt;/pre>
&lt;p>Now our &lt;code>body&lt;/code> will use the &lt;code>bg-color&lt;/code> variable which, if the user prefers dark mode, will be an off-black! Nice! I hope this mini-tutorial was helpful and that you see the advantages of this way over rolling your own moon icon; although I&amp;rsquo;ll admit that might be a bit more fun.&lt;/p></description></item></channel></rss>